# coding: utf-8

"""
    Customer API - version 1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class JobsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def jobs_all(self, **kwargs):
        """
        Search jobs
        Search jobs by params
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_all(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q: full-text search query based on a job title, location; case insensitive; e.g. java developer
        :param int limit: number of elements to return. max value is 100
        :param int offset: number of elements to skip while processing result
        :param list[str] city: city filter (part of the location object); can be used repeatedly; case insensitive; e.g. San Francisco
        :param list[str] department: department filter (by department label); can be used repeatedly; case insensitive; e.g. “Marketing”
        :param datetime updated_after: ISO8601-formatted time boundaries for the job update time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ
        :param datetime last_activity_after: ISO8601-formatted time boundaries for the job lastActivityOn time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ. lastActivityOn is updated when job is edited, new candidates apply or job is published. 
        :param str language: Exceptions to the language code ISO format: * \"en-GB\" - \"English - English (UK)\" * \"fr-CA\" - \"French - français (Canada)\" * \"pt-BR\" - \"Portugal - português (Brasil)\" * \"pt-PT\" - \"Portugal - português (Portugal)\" * \"zh-HK\" - \"Chinese (Traditional) - 中文 (香港)\" * \"zh-CN\" - \"Chinese (Simplified) - 中文 (简体)\" 
        :param str posting_status: Posting status of a job 
        :return: Jobs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_all_with_http_info(**kwargs)
        else:
            (data) = self.jobs_all_with_http_info(**kwargs)
            return data

    def jobs_all_with_http_info(self, **kwargs):
        """
        Search jobs
        Search jobs by params
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_all_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q: full-text search query based on a job title, location; case insensitive; e.g. java developer
        :param int limit: number of elements to return. max value is 100
        :param int offset: number of elements to skip while processing result
        :param list[str] city: city filter (part of the location object); can be used repeatedly; case insensitive; e.g. San Francisco
        :param list[str] department: department filter (by department label); can be used repeatedly; case insensitive; e.g. “Marketing”
        :param datetime updated_after: ISO8601-formatted time boundaries for the job update time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ
        :param datetime last_activity_after: ISO8601-formatted time boundaries for the job lastActivityOn time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ. lastActivityOn is updated when job is edited, new candidates apply or job is published. 
        :param str language: Exceptions to the language code ISO format: * \"en-GB\" - \"English - English (UK)\" * \"fr-CA\" - \"French - français (Canada)\" * \"pt-BR\" - \"Portugal - português (Brasil)\" * \"pt-PT\" - \"Portugal - português (Portugal)\" * \"zh-HK\" - \"Chinese (Traditional) - 中文 (香港)\" * \"zh-CN\" - \"Chinese (Simplified) - 中文 (简体)\" 
        :param str posting_status: Posting status of a job 
        :return: Jobs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'limit', 'offset', 'city', 'department', 'updated_after', 'last_activity_after', 'language', 'posting_status']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_all" % key
                )
            params[key] = val
        del params['kwargs']

        if 'limit' in params and params['limit'] > 100:
            raise ValueError("Invalid value for parameter `limit` when calling `jobs_all`, must be a value less than or equal to `100`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `jobs_all`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `jobs_all`, must be a value greater than or equal to `0`")

        collection_formats = {}

        resource_path = '/jobs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'q' in params:
            query_params['q'] = params['q']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'city' in params:
            query_params['city'] = params['city']
            collection_formats['city'] = 'multi'
        if 'department' in params:
            query_params['department'] = params['department']
            collection_formats['department'] = 'multi'
        if 'updated_after' in params:
            query_params['updatedAfter'] = params['updated_after']
        if 'last_activity_after' in params:
            query_params['lastActivityAfter'] = params['last_activity_after']
        if 'language' in params:
            query_params['language'] = params['language']
        if 'posting_status' in params:
            query_params['postingStatus'] = params['posting_status']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Jobs',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_create(self, **kwargs):
        """
        Create a new job
        Create a new job. Ignores all nonexistent job properties and job properties values.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_create(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param JobInput job: Job object that needs to be created
        :return: JobDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_create_with_http_info(**kwargs)
        else:
            (data) = self.jobs_create_with_http_info(**kwargs)
            return data

    def jobs_create_with_http_info(self, **kwargs):
        """
        Create a new job
        Create a new job. Ignores all nonexistent job properties and job properties values.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_create_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param JobInput job: Job object that needs to be created
        :return: JobDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_create" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/jobs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'job' in params:
            body_params = params['job']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobDetails',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_get(self, id, **kwargs):
        """
        Get content of a job with a given id.
        Get content of a job with a given id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :return: JobDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_get_with_http_info(id, **kwargs)
        else:
            (data) = self.jobs_get_with_http_info(id, **kwargs)
            return data

    def jobs_get_with_http_info(self, id, **kwargs):
        """
        Get content of a job with a given id.
        Get content of a job with a given id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :return: JobDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_get`")


        collection_formats = {}

        resource_path = '/jobs/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobDetails',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_hiring_team_add(self, id, **kwargs):
        """
        Add hiring team member of a job with a given id.
        Add hiring team member of a job with a given id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_hiring_team_add(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param HiringTeamMember hiring_team_member: HiringTeamMember object
        :return: HiringTeamMemberResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_hiring_team_add_with_http_info(id, **kwargs)
        else:
            (data) = self.jobs_hiring_team_add_with_http_info(id, **kwargs)
            return data

    def jobs_hiring_team_add_with_http_info(self, id, **kwargs):
        """
        Add hiring team member of a job with a given id.
        Add hiring team member of a job with a given id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_hiring_team_add_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param HiringTeamMember hiring_team_member: HiringTeamMember object
        :return: HiringTeamMemberResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'hiring_team_member']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_hiring_team_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_hiring_team_add`")


        collection_formats = {}

        resource_path = '/jobs/{id}/hiring-team'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'hiring_team_member' in params:
            body_params = params['hiring_team_member']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HiringTeamMemberResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_hiring_team_get(self, id, **kwargs):
        """
        Get hiring team of a job with a given id.
        Get hiring team of a job with a given id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_hiring_team_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :return: HiringTeamMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_hiring_team_get_with_http_info(id, **kwargs)
        else:
            (data) = self.jobs_hiring_team_get_with_http_info(id, **kwargs)
            return data

    def jobs_hiring_team_get_with_http_info(self, id, **kwargs):
        """
        Get hiring team of a job with a given id.
        Get hiring team of a job with a given id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_hiring_team_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :return: HiringTeamMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_hiring_team_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_hiring_team_get`")


        collection_formats = {}

        resource_path = '/jobs/{id}/hiring-team'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HiringTeamMembers',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_hiring_team_remove(self, id, user_id, **kwargs):
        """
        Removes hiring team member of a job with a given id.
        Removes hiring team member of a job with a given id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_hiring_team_remove(id, user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param str user_id: identifier of an user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_hiring_team_remove_with_http_info(id, user_id, **kwargs)
        else:
            (data) = self.jobs_hiring_team_remove_with_http_info(id, user_id, **kwargs)
            return data

    def jobs_hiring_team_remove_with_http_info(self, id, user_id, **kwargs):
        """
        Removes hiring team member of a job with a given id.
        Removes hiring team member of a job with a given id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_hiring_team_remove_with_http_info(id, user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param str user_id: identifier of an user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_hiring_team_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_hiring_team_remove`")
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `jobs_hiring_team_remove`")


        collection_formats = {}

        resource_path = '/jobs/{id}/hiring-team/{userId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_jobads_all(self, id, **kwargs):
        """
        Find and list job ads for a given job
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_jobads_all(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :return: JobAds
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_jobads_all_with_http_info(id, **kwargs)
        else:
            (data) = self.jobs_jobads_all_with_http_info(id, **kwargs)
            return data

    def jobs_jobads_all_with_http_info(self, id, **kwargs):
        """
        Find and list job ads for a given job
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_jobads_all_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :return: JobAds
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_jobads_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_jobads_all`")


        collection_formats = {}

        resource_path = '/jobs/{id}/jobads'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobAds',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_jobads_create(self, id, job_ad, **kwargs):
        """
        Create a new job ad
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_jobads_create(id, job_ad, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param JobAdContent job_ad: job ad (required)
        :return: JobAdItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_jobads_create_with_http_info(id, job_ad, **kwargs)
        else:
            (data) = self.jobs_jobads_create_with_http_info(id, job_ad, **kwargs)
            return data

    def jobs_jobads_create_with_http_info(self, id, job_ad, **kwargs):
        """
        Create a new job ad
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_jobads_create_with_http_info(id, job_ad, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param JobAdContent job_ad: job ad (required)
        :return: JobAdItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'job_ad']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_jobads_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_jobads_create`")
        # verify the required parameter 'job_ad' is set
        if ('job_ad' not in params) or (params['job_ad'] is None):
            raise ValueError("Missing the required parameter `job_ad` when calling `jobs_jobads_create`")


        collection_formats = {}

        resource_path = '/jobs/{id}/jobads'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'job_ad' in params:
            body_params = params['job_ad']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobAdItem',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_jobads_get(self, id, jobad_id, **kwargs):
        """
        Get a job ad
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_jobads_get(id, jobad_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param str jobad_id: identifier of a job ad (required)
        :return: JobAdItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_jobads_get_with_http_info(id, jobad_id, **kwargs)
        else:
            (data) = self.jobs_jobads_get_with_http_info(id, jobad_id, **kwargs)
            return data

    def jobs_jobads_get_with_http_info(self, id, jobad_id, **kwargs):
        """
        Get a job ad
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_jobads_get_with_http_info(id, jobad_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param str jobad_id: identifier of a job ad (required)
        :return: JobAdItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'jobad_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_jobads_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_jobads_get`")
        # verify the required parameter 'jobad_id' is set
        if ('jobad_id' not in params) or (params['jobad_id'] is None):
            raise ValueError("Missing the required parameter `jobad_id` when calling `jobs_jobads_get`")


        collection_formats = {}

        resource_path = '/jobs/{id}/jobads/{jobadId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'jobad_id' in params:
            path_params['jobadId'] = params['jobad_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobAdItem',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_jobads_postings_all(self, id, jobad_id, **kwargs):
        """
        List publications for a job ad
        List publications for a job ad
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_jobads_postings_all(id, jobad_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param str jobad_id: job ad identifier (required)
        :param bool active_only: publication status filter; when omitted, defaults to 'true' (only active publications are returned); 'false' returns active and inactive publications
        :return: PublicationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_jobads_postings_all_with_http_info(id, jobad_id, **kwargs)
        else:
            (data) = self.jobs_jobads_postings_all_with_http_info(id, jobad_id, **kwargs)
            return data

    def jobs_jobads_postings_all_with_http_info(self, id, jobad_id, **kwargs):
        """
        List publications for a job ad
        List publications for a job ad
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_jobads_postings_all_with_http_info(id, jobad_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param str jobad_id: job ad identifier (required)
        :param bool active_only: publication status filter; when omitted, defaults to 'true' (only active publications are returned); 'false' returns active and inactive publications
        :return: PublicationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'jobad_id', 'active_only']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_jobads_postings_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_jobads_postings_all`")
        # verify the required parameter 'jobad_id' is set
        if ('jobad_id' not in params) or (params['jobad_id'] is None):
            raise ValueError("Missing the required parameter `jobad_id` when calling `jobs_jobads_postings_all`")


        collection_formats = {}

        resource_path = '/jobs/{id}/jobads/{jobadId}/postings'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'jobad_id' in params:
            path_params['jobadId'] = params['jobad_id']

        query_params = {}
        if 'active_only' in params:
            query_params['activeOnly'] = params['active_only']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PublicationList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_jobads_postings_create(self, id, jobad_id, **kwargs):
        """
        Publishes a job ad
        Publishes a job ad to internal sources (Career Pages, Job Widget, Facebook App, WordPress Plugin, Posting API) and optionally to all free job aggregators.  By default it's set to publish to job aggregators  It reflects a Publish action available in the SmartRecruiters UI.  Note: Internal sources depend on a company's payment plan. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_jobads_postings_create(id, jobad_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param str jobad_id: job ad identifier (required)
        :param Publication publication: Publication object
        :return: JobAdPublicationScheduled
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_jobads_postings_create_with_http_info(id, jobad_id, **kwargs)
        else:
            (data) = self.jobs_jobads_postings_create_with_http_info(id, jobad_id, **kwargs)
            return data

    def jobs_jobads_postings_create_with_http_info(self, id, jobad_id, **kwargs):
        """
        Publishes a job ad
        Publishes a job ad to internal sources (Career Pages, Job Widget, Facebook App, WordPress Plugin, Posting API) and optionally to all free job aggregators.  By default it's set to publish to job aggregators  It reflects a Publish action available in the SmartRecruiters UI.  Note: Internal sources depend on a company's payment plan. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_jobads_postings_create_with_http_info(id, jobad_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param str jobad_id: job ad identifier (required)
        :param Publication publication: Publication object
        :return: JobAdPublicationScheduled
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'jobad_id', 'publication']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_jobads_postings_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_jobads_postings_create`")
        # verify the required parameter 'jobad_id' is set
        if ('jobad_id' not in params) or (params['jobad_id'] is None):
            raise ValueError("Missing the required parameter `jobad_id` when calling `jobs_jobads_postings_create`")


        collection_formats = {}

        resource_path = '/jobs/{id}/jobads/{jobadId}/postings'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'jobad_id' in params:
            path_params['jobadId'] = params['jobad_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'publication' in params:
            body_params = params['publication']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobAdPublicationScheduled',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_jobads_postings_unpublish(self, id, jobad_id, **kwargs):
        """
        Unpublish a job ad
        Unpublishes a job ad from all sources.  **Unpublishing a default job ad will unpublish all other job ads within that job.** 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_jobads_postings_unpublish(id, jobad_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param str jobad_id: job ad identifier (required)
        :return: JobAdUnpublishScheduled
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_jobads_postings_unpublish_with_http_info(id, jobad_id, **kwargs)
        else:
            (data) = self.jobs_jobads_postings_unpublish_with_http_info(id, jobad_id, **kwargs)
            return data

    def jobs_jobads_postings_unpublish_with_http_info(self, id, jobad_id, **kwargs):
        """
        Unpublish a job ad
        Unpublishes a job ad from all sources.  **Unpublishing a default job ad will unpublish all other job ads within that job.** 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_jobads_postings_unpublish_with_http_info(id, jobad_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param str jobad_id: job ad identifier (required)
        :return: JobAdUnpublishScheduled
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'jobad_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_jobads_postings_unpublish" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_jobads_postings_unpublish`")
        # verify the required parameter 'jobad_id' is set
        if ('jobad_id' not in params) or (params['jobad_id'] is None):
            raise ValueError("Missing the required parameter `jobad_id` when calling `jobs_jobads_postings_unpublish`")


        collection_formats = {}

        resource_path = '/jobs/{id}/jobads/{jobadId}/postings'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'jobad_id' in params:
            path_params['jobadId'] = params['jobad_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobAdUnpublishScheduled',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_jobads_update(self, id, jobad_id, job_ad, **kwargs):
        """
        Update a job ad
        Enables you to update an existing job ad. NOTE: In order for a job ad changes to be reflected on internal sources (Career Sites, Job Widgets etc.) and Job Aggregators, you need to Publish the job ad after making an update. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_jobads_update(id, jobad_id, job_ad, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param str jobad_id: job ad identifier (required)
        :param JobAdContent job_ad: job ad (required)
        :return: JobAdItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_jobads_update_with_http_info(id, jobad_id, job_ad, **kwargs)
        else:
            (data) = self.jobs_jobads_update_with_http_info(id, jobad_id, job_ad, **kwargs)
            return data

    def jobs_jobads_update_with_http_info(self, id, jobad_id, job_ad, **kwargs):
        """
        Update a job ad
        Enables you to update an existing job ad. NOTE: In order for a job ad changes to be reflected on internal sources (Career Sites, Job Widgets etc.) and Job Aggregators, you need to Publish the job ad after making an update. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_jobads_update_with_http_info(id, jobad_id, job_ad, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param str jobad_id: job ad identifier (required)
        :param JobAdContent job_ad: job ad (required)
        :return: JobAdItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'jobad_id', 'job_ad']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_jobads_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_jobads_update`")
        # verify the required parameter 'jobad_id' is set
        if ('jobad_id' not in params) or (params['jobad_id'] is None):
            raise ValueError("Missing the required parameter `jobad_id` when calling `jobs_jobads_update`")
        # verify the required parameter 'job_ad' is set
        if ('job_ad' not in params) or (params['job_ad'] is None):
            raise ValueError("Missing the required parameter `job_ad` when calling `jobs_jobads_update`")


        collection_formats = {}

        resource_path = '/jobs/{id}/jobads/{jobadId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'jobad_id' in params:
            path_params['jobadId'] = params['jobad_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'job_ad' in params:
            body_params = params['job_ad']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobAdItem',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_notes_get(self, id, **kwargs):
        """
        Get note of a job.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_notes_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :return: JobNote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_notes_get_with_http_info(id, **kwargs)
        else:
            (data) = self.jobs_notes_get_with_http_info(id, **kwargs)
            return data

    def jobs_notes_get_with_http_info(self, id, **kwargs):
        """
        Get note of a job.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_notes_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :return: JobNote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_notes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_notes_get`")


        collection_formats = {}

        resource_path = '/jobs/{id}/note'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobNote',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_notes_update(self, id, job_note, **kwargs):
        """
        Update note of a job.
        Update note of a job.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_notes_update(id, job_note, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param JobNote job_note: (required)
        :return: JobNote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_notes_update_with_http_info(id, job_note, **kwargs)
        else:
            (data) = self.jobs_notes_update_with_http_info(id, job_note, **kwargs)
            return data

    def jobs_notes_update_with_http_info(self, id, job_note, **kwargs):
        """
        Update note of a job.
        Update note of a job.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_notes_update_with_http_info(id, job_note, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param JobNote job_note: (required)
        :return: JobNote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'job_note']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_notes_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_notes_update`")
        # verify the required parameter 'job_note' is set
        if ('job_note' not in params) or (params['job_note'] is None):
            raise ValueError("Missing the required parameter `job_note` when calling `jobs_notes_update`")


        collection_formats = {}

        resource_path = '/jobs/{id}/note'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'job_note' in params:
            body_params = params['job_note']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobNote',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_patch(self, id, **kwargs):
        """
        Update a job
        Update a job. All attributes that are used when creating a job can be used. Ignores all nonexistent job properties and job properties values.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_patch(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job (required)
        :param JSONPatch json_patch: patch request
        :return: JobDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_patch_with_http_info(id, **kwargs)
        else:
            (data) = self.jobs_patch_with_http_info(id, **kwargs)
            return data

    def jobs_patch_with_http_info(self, id, **kwargs):
        """
        Update a job
        Update a job. All attributes that are used when creating a job can be used. Ignores all nonexistent job properties and job properties values.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_patch_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job (required)
        :param JSONPatch json_patch: patch request
        :return: JobDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'json_patch']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_patch`")


        collection_formats = {}

        resource_path = '/jobs/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'json_patch' in params:
            body_params = params['json_patch']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json-patch+json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobDetails',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_positions_all(self, id, **kwargs):
        """
        Positions for a job
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_positions_all(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :return: JobPositions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_positions_all_with_http_info(id, **kwargs)
        else:
            (data) = self.jobs_positions_all_with_http_info(id, **kwargs)
            return data

    def jobs_positions_all_with_http_info(self, id, **kwargs):
        """
        Positions for a job
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_positions_all_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :return: JobPositions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_positions_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_positions_all`")


        collection_formats = {}

        resource_path = '/jobs/{id}/positions'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobPositions',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_positions_create(self, id, job_position, **kwargs):
        """
        Create a new position for a job
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_positions_create(id, job_position, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param JobPositionInput job_position: Position body object (required)
        :return: JobPosition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_positions_create_with_http_info(id, job_position, **kwargs)
        else:
            (data) = self.jobs_positions_create_with_http_info(id, job_position, **kwargs)
            return data

    def jobs_positions_create_with_http_info(self, id, job_position, **kwargs):
        """
        Create a new position for a job
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_positions_create_with_http_info(id, job_position, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param JobPositionInput job_position: Position body object (required)
        :return: JobPosition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'job_position']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_positions_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_positions_create`")
        # verify the required parameter 'job_position' is set
        if ('job_position' not in params) or (params['job_position'] is None):
            raise ValueError("Missing the required parameter `job_position` when calling `jobs_positions_create`")


        collection_formats = {}

        resource_path = '/jobs/{id}/positions'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'job_position' in params:
            body_params = params['job_position']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobPosition',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_positions_get(self, id, position_id, **kwargs):
        """
        Get a single position
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_positions_get(id, position_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param str position_id: identifier of a position (required)
        :return: JobPosition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_positions_get_with_http_info(id, position_id, **kwargs)
        else:
            (data) = self.jobs_positions_get_with_http_info(id, position_id, **kwargs)
            return data

    def jobs_positions_get_with_http_info(self, id, position_id, **kwargs):
        """
        Get a single position
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_positions_get_with_http_info(id, position_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param str position_id: identifier of a position (required)
        :return: JobPosition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'position_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_positions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_positions_get`")
        # verify the required parameter 'position_id' is set
        if ('position_id' not in params) or (params['position_id'] is None):
            raise ValueError("Missing the required parameter `position_id` when calling `jobs_positions_get`")


        collection_formats = {}

        resource_path = '/jobs/{id}/positions/{positionId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'position_id' in params:
            path_params['positionId'] = params['position_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobPosition',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_positions_remove(self, id, position_id, **kwargs):
        """
        Delete position
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_positions_remove(id, position_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param str position_id: identifier of a position (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_positions_remove_with_http_info(id, position_id, **kwargs)
        else:
            (data) = self.jobs_positions_remove_with_http_info(id, position_id, **kwargs)
            return data

    def jobs_positions_remove_with_http_info(self, id, position_id, **kwargs):
        """
        Delete position
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_positions_remove_with_http_info(id, position_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param str position_id: identifier of a position (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'position_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_positions_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_positions_remove`")
        # verify the required parameter 'position_id' is set
        if ('position_id' not in params) or (params['position_id'] is None):
            raise ValueError("Missing the required parameter `position_id` when calling `jobs_positions_remove`")


        collection_formats = {}

        resource_path = '/jobs/{id}/positions/{positionId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'position_id' in params:
            path_params['positionId'] = params['position_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_positions_update(self, id, job_position, position_id, **kwargs):
        """
        Update position
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_positions_update(id, job_position, position_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param JobPositionInput job_position: Position body object (required)
        :param str position_id: identifier of a position (required)
        :return: JobPosition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_positions_update_with_http_info(id, job_position, position_id, **kwargs)
        else:
            (data) = self.jobs_positions_update_with_http_info(id, job_position, position_id, **kwargs)
            return data

    def jobs_positions_update_with_http_info(self, id, job_position, position_id, **kwargs):
        """
        Update position
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_positions_update_with_http_info(id, job_position, position_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param JobPositionInput job_position: Position body object (required)
        :param str position_id: identifier of a position (required)
        :return: JobPosition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'job_position', 'position_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_positions_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_positions_update`")
        # verify the required parameter 'job_position' is set
        if ('job_position' not in params) or (params['job_position'] is None):
            raise ValueError("Missing the required parameter `job_position` when calling `jobs_positions_update`")
        # verify the required parameter 'position_id' is set
        if ('position_id' not in params) or (params['position_id'] is None):
            raise ValueError("Missing the required parameter `position_id` when calling `jobs_positions_update`")


        collection_formats = {}

        resource_path = '/jobs/{id}/positions/{positionId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'position_id' in params:
            path_params['positionId'] = params['position_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'job_position' in params:
            body_params = params['job_position']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobPosition',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_publication_all(self, id, **kwargs):
        """
        Find and list publications for a job
        Find and list publications for a job
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_publication_all(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param bool active_only: publication status filter; defaults to 'true' (only active publications are returned); 'false' returns active and inactive publications
        :return: PublicationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_publication_all_with_http_info(id, **kwargs)
        else:
            (data) = self.jobs_publication_all_with_http_info(id, **kwargs)
            return data

    def jobs_publication_all_with_http_info(self, id, **kwargs):
        """
        Find and list publications for a job
        Find and list publications for a job
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_publication_all_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :param bool active_only: publication status filter; defaults to 'true' (only active publications are returned); 'false' returns active and inactive publications
        :return: PublicationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'active_only']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_publication_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_publication_all`")


        collection_formats = {}

        resource_path = '/jobs/{id}/publication'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'active_only' in params:
            query_params['activeOnly'] = params['active_only']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PublicationList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_publication_create(self, id, **kwargs):
        """
        Publishes a default job ad
        Publishes default job ad to internal sources and to free job aggregators.  It reflects a Publish action available in the SmartRecruiters UI.  Note:   Internal sources: Career Pages, Job Widget, Facebook App, WordPress Plugin, Posting API depend on a company's payment plan. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_publication_create(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job (required)
        :param Publication publication: Publication object
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_publication_create_with_http_info(id, **kwargs)
        else:
            (data) = self.jobs_publication_create_with_http_info(id, **kwargs)
            return data

    def jobs_publication_create_with_http_info(self, id, **kwargs):
        """
        Publishes a default job ad
        Publishes default job ad to internal sources and to free job aggregators.  It reflects a Publish action available in the SmartRecruiters UI.  Note:   Internal sources: Career Pages, Job Widget, Facebook App, WordPress Plugin, Posting API depend on a company's payment plan. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_publication_create_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job (required)
        :param Publication publication: Publication object
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'publication']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_publication_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_publication_create`")


        collection_formats = {}

        resource_path = '/jobs/{id}/publication'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'publication' in params:
            body_params = params['publication']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_publication_unpublish(self, id, **kwargs):
        """
        Unpublishes a job from all sources
        Unpublishes a job from all sources
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_publication_unpublish(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_publication_unpublish_with_http_info(id, **kwargs)
        else:
            (data) = self.jobs_publication_unpublish_with_http_info(id, **kwargs)
            return data

    def jobs_publication_unpublish_with_http_info(self, id, **kwargs):
        """
        Unpublishes a job from all sources
        Unpublishes a job from all sources
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_publication_unpublish_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_publication_unpublish" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_publication_unpublish`")


        collection_formats = {}

        resource_path = '/jobs/{id}/publication'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_status_history_get(self, id, **kwargs):
        """
        Job status history
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_status_history_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :return: JobStatusHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_status_history_get_with_http_info(id, **kwargs)
        else:
            (data) = self.jobs_status_history_get_with_http_info(id, **kwargs)
            return data

    def jobs_status_history_get_with_http_info(self, id, **kwargs):
        """
        Job status history
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_status_history_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: identifier of a job (required)
        :return: JobStatusHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_status_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_status_history_get`")


        collection_formats = {}

        resource_path = '/jobs/{id}/status/history'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobStatusHistory',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_status_update(self, job_status, id, **kwargs):
        """
        Updates job status
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_status_update(job_status, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param JobStatusUpdate job_status: (required)
        :param str id: Identifier of a job (required)
        :return: JobStatusUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_status_update_with_http_info(job_status, id, **kwargs)
        else:
            (data) = self.jobs_status_update_with_http_info(job_status, id, **kwargs)
            return data

    def jobs_status_update_with_http_info(self, job_status, id, **kwargs):
        """
        Updates job status
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_status_update_with_http_info(job_status, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param JobStatusUpdate job_status: (required)
        :param str id: Identifier of a job (required)
        :return: JobStatusUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_status', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_status_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_status' is set
        if ('job_status' not in params) or (params['job_status'] is None):
            raise ValueError("Missing the required parameter `job_status` when calling `jobs_status_update`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_status_update`")


        collection_formats = {}

        resource_path = '/jobs/{id}/status'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'job_status' in params:
            body_params = params['job_status']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobStatusUpdate',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def jobs_update(self, id, **kwargs):
        """
        Updates job
        Enables you to update job. This operation requires passing an instance of the Job object as part of the PUT request. Ignores all nonexistent job properties and job properties values. Returns an updated job.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_update(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job (required)
        :param JobInput job: Job object that needs to be updated
        :return: JobDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.jobs_update_with_http_info(id, **kwargs)
        else:
            (data) = self.jobs_update_with_http_info(id, **kwargs)
            return data

    def jobs_update_with_http_info(self, id, **kwargs):
        """
        Updates job
        Enables you to update job. This operation requires passing an instance of the Job object as part of the PUT request. Ignores all nonexistent job properties and job properties values. Returns an updated job.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.jobs_update_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job (required)
        :param JobInput job: Job object that needs to be updated
        :return: JobDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'job']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_update`")


        collection_formats = {}

        resource_path = '/jobs/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'job' in params:
            body_params = params['job']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobDetails',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
