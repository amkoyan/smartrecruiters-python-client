# coding: utf-8

"""
    Customer API - version 1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class PostingsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def v1_get_posting(self, company_identifier, posting_id, **kwargs):
        """
        Get posting by posting id for given company
        Note: In order to update content of a job posting available via the Posting API, you need to re-post the job in SmartRecruiters application.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_get_posting(company_identifier, posting_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_identifier: Identifier of a company (required)
        :param str posting_id: Posting identifier (required)
        :param str source_type_id: sourceTypeId can be retrieved using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSourceTypes) endpoint. Used together with **sourceId** to add source tracking parameter to **applyUrl**.
        :param str source_id: sourceId can be retrieved using [get /configuration/sources/{sourceType}/values](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSources) endpoint. Used together with **sourceTypeId** to add source tracking parameter to **applyUrl**.
        :return: Posting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1_get_posting_with_http_info(company_identifier, posting_id, **kwargs)
        else:
            (data) = self.v1_get_posting_with_http_info(company_identifier, posting_id, **kwargs)
            return data

    def v1_get_posting_with_http_info(self, company_identifier, posting_id, **kwargs):
        """
        Get posting by posting id for given company
        Note: In order to update content of a job posting available via the Posting API, you need to re-post the job in SmartRecruiters application.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_get_posting_with_http_info(company_identifier, posting_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_identifier: Identifier of a company (required)
        :param str posting_id: Posting identifier (required)
        :param str source_type_id: sourceTypeId can be retrieved using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSourceTypes) endpoint. Used together with **sourceId** to add source tracking parameter to **applyUrl**.
        :param str source_id: sourceId can be retrieved using [get /configuration/sources/{sourceType}/values](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSources) endpoint. Used together with **sourceTypeId** to add source tracking parameter to **applyUrl**.
        :return: Posting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_identifier', 'posting_id', 'source_type_id', 'source_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_get_posting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_identifier' is set
        if ('company_identifier' not in params) or (params['company_identifier'] is None):
            raise ValueError("Missing the required parameter `company_identifier` when calling `v1_get_posting`")
        # verify the required parameter 'posting_id' is set
        if ('posting_id' not in params) or (params['posting_id'] is None):
            raise ValueError("Missing the required parameter `posting_id` when calling `v1_get_posting`")


        collection_formats = {}

        resource_path = '/v1/companies/{companyIdentifier}/postings/{postingId}'.replace('{format}', 'json')
        path_params = {}
        if 'company_identifier' in params:
            path_params['companyIdentifier'] = params['company_identifier']
        if 'posting_id' in params:
            path_params['postingId'] = params['posting_id']

        query_params = {}
        if 'source_type_id' in params:
            query_params['sourceTypeId'] = params['source_type_id']
        if 'source_id' in params:
            query_params['sourceId'] = params['source_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Posting',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def v1_list_departments(self, company_identifier, **kwargs):
        """
        List departments for given company
        List departments for given company.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_list_departments(company_identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_identifier: Identifier of a company (required)
        :return: Departments
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1_list_departments_with_http_info(company_identifier, **kwargs)
        else:
            (data) = self.v1_list_departments_with_http_info(company_identifier, **kwargs)
            return data

    def v1_list_departments_with_http_info(self, company_identifier, **kwargs):
        """
        List departments for given company
        List departments for given company.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_list_departments_with_http_info(company_identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_identifier: Identifier of a company (required)
        :return: Departments
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_identifier']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_list_departments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_identifier' is set
        if ('company_identifier' not in params) or (params['company_identifier'] is None):
            raise ValueError("Missing the required parameter `company_identifier` when calling `v1_list_departments`")


        collection_formats = {}

        resource_path = '/v1/companies/{companyIdentifier}/departments'.replace('{format}', 'json')
        path_params = {}
        if 'company_identifier' in params:
            path_params['companyIdentifier'] = params['company_identifier']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Departments',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def v1_list_postings(self, company_identifier, **kwargs):
        """
        Lists active postings published by given company
        Lists active postings published by given company. Return PostingList
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_list_postings(company_identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_identifier: Identifier of a company (required)
        :param str q: full-text search query based on a job title, location
        :param int limit: number of elements to return. max value is 100
        :param int offset: number of elements to skip while processing result
        :param str destination: Filter indicating which postings to return: * **PUBLIC**: response will include ONLY public postings * **INTERNAL**: response will include ONLY internal postings * **INTERNAL_OR_PUBLIC**: response will include internal postings or public postings, but not both for a single job. If a job has both types of postings, only internal postings will be returned 
        :param str country: country code filter (part of the location object)
        :param str region: region filter (part of the location object)
        :param str city: city filter (part of the location object)
        :param str department: department filter (department id)
        :param list[str] language: Exceptions to the language code ISO format: * \"en-GB\" - \"English - English (UK)\" * \"fr-CA\" - \"French - français (Canada)\" * \"pt-BR\" - \"Portugal - português (Brasil)\" * \"pt-PT\" - \"Portugal - português (Portugal)\" * \"zh-HK\" - \"Chinese (Traditional) - 中文 (香港)\" * \"zh-CN\" - \"Chinese (Simplified) - 中文 (简体)\" 
        :return: PostingList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1_list_postings_with_http_info(company_identifier, **kwargs)
        else:
            (data) = self.v1_list_postings_with_http_info(company_identifier, **kwargs)
            return data

    def v1_list_postings_with_http_info(self, company_identifier, **kwargs):
        """
        Lists active postings published by given company
        Lists active postings published by given company. Return PostingList
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_list_postings_with_http_info(company_identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_identifier: Identifier of a company (required)
        :param str q: full-text search query based on a job title, location
        :param int limit: number of elements to return. max value is 100
        :param int offset: number of elements to skip while processing result
        :param str destination: Filter indicating which postings to return: * **PUBLIC**: response will include ONLY public postings * **INTERNAL**: response will include ONLY internal postings * **INTERNAL_OR_PUBLIC**: response will include internal postings or public postings, but not both for a single job. If a job has both types of postings, only internal postings will be returned 
        :param str country: country code filter (part of the location object)
        :param str region: region filter (part of the location object)
        :param str city: city filter (part of the location object)
        :param str department: department filter (department id)
        :param list[str] language: Exceptions to the language code ISO format: * \"en-GB\" - \"English - English (UK)\" * \"fr-CA\" - \"French - français (Canada)\" * \"pt-BR\" - \"Portugal - português (Brasil)\" * \"pt-PT\" - \"Portugal - português (Portugal)\" * \"zh-HK\" - \"Chinese (Traditional) - 中文 (香港)\" * \"zh-CN\" - \"Chinese (Simplified) - 中文 (简体)\" 
        :return: PostingList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_identifier', 'q', 'limit', 'offset', 'destination', 'country', 'region', 'city', 'department', 'language']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_list_postings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_identifier' is set
        if ('company_identifier' not in params) or (params['company_identifier'] is None):
            raise ValueError("Missing the required parameter `company_identifier` when calling `v1_list_postings`")


        collection_formats = {}

        resource_path = '/v1/companies/{companyIdentifier}/postings'.replace('{format}', 'json')
        path_params = {}
        if 'company_identifier' in params:
            path_params['companyIdentifier'] = params['company_identifier']

        query_params = {}
        if 'q' in params:
            query_params['q'] = params['q']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'destination' in params:
            query_params['destination'] = params['destination']
        if 'country' in params:
            query_params['country'] = params['country']
        if 'region' in params:
            query_params['region'] = params['region']
        if 'city' in params:
            query_params['city'] = params['city']
        if 'department' in params:
            query_params['department'] = params['department']
        if 'language' in params:
            query_params['language'] = params['language']
            collection_formats['language'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PostingList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
