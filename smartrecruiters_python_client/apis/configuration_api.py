# coding: utf-8

"""
    Unofficial python library for the SmartRecruiters API

    The SmartRecruiters API provides a platform to integrate services or applications, build apps and create fully customizable career sites. It exposes SmartRecruiters functionality and allows to connect and build software enhancing it.

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ConfigurationApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def configuration_candidate_properties_all(self, **kwargs):
        """
        Get a list of available candidate properties
        Get all candidate properties and their configuration for a company
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_candidate_properties_all(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: CandidatePropertyDefinitionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_candidate_properties_all_with_http_info(**kwargs)
        else:
            (data) = self.configuration_candidate_properties_all_with_http_info(**kwargs)
            return data

    def configuration_candidate_properties_all_with_http_info(self, **kwargs):
        """
        Get a list of available candidate properties
        Get all candidate properties and their configuration for a company
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_candidate_properties_all_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: CandidatePropertyDefinitionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_candidate_properties_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/configuration/candidate-properties'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CandidatePropertyDefinitionList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_candidate_properties_get(self, id, **kwargs):
        """
        Get candidate property by id
        Get candidate property details and its configuration by id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_candidate_properties_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of candidate property (required)
        :return: CandidatePropertyDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_candidate_properties_get_with_http_info(id, **kwargs)
        else:
            (data) = self.configuration_candidate_properties_get_with_http_info(id, **kwargs)
            return data

    def configuration_candidate_properties_get_with_http_info(self, id, **kwargs):
        """
        Get candidate property by id
        Get candidate property details and its configuration by id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_candidate_properties_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of candidate property (required)
        :return: CandidatePropertyDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_candidate_properties_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_candidate_properties_get`")


        collection_formats = {}

        resource_path = '/configuration/candidate-properties/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CandidatePropertyDefinition',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_candidate_properties_values_all(self, id, **kwargs):
        """
        Get Candidate Property values
        Lists all available values for given candidate property id. This endpoint is available only for SINGLE_SELECT candidate property type.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_candidate_properties_values_all(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of candidate property (required)
        :return: CandidatePropertyValueList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_candidate_properties_values_all_with_http_info(id, **kwargs)
        else:
            (data) = self.configuration_candidate_properties_values_all_with_http_info(id, **kwargs)
            return data

    def configuration_candidate_properties_values_all_with_http_info(self, id, **kwargs):
        """
        Get Candidate Property values
        Lists all available values for given candidate property id. This endpoint is available only for SINGLE_SELECT candidate property type.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_candidate_properties_values_all_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of candidate property (required)
        :return: CandidatePropertyValueList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_candidate_properties_values_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_candidate_properties_values_all`")


        collection_formats = {}

        resource_path = '/configuration/candidate-properties/{id}/values'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CandidatePropertyValueList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_candidate_properties_values_create(self, id, candidate_property_value, **kwargs):
        """
        Create candidate property value
        Create SINGLE_SELECT candidate property value
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_candidate_properties_values_create(id, candidate_property_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of candidate property (required)
        :param CandidatePropertyValue candidate_property_value: Candidate property value. (required)
        :return: CandidatePropertyValue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_candidate_properties_values_create_with_http_info(id, candidate_property_value, **kwargs)
        else:
            (data) = self.configuration_candidate_properties_values_create_with_http_info(id, candidate_property_value, **kwargs)
            return data

    def configuration_candidate_properties_values_create_with_http_info(self, id, candidate_property_value, **kwargs):
        """
        Create candidate property value
        Create SINGLE_SELECT candidate property value
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_candidate_properties_values_create_with_http_info(id, candidate_property_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of candidate property (required)
        :param CandidatePropertyValue candidate_property_value: Candidate property value. (required)
        :return: CandidatePropertyValue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'candidate_property_value']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_candidate_properties_values_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_candidate_properties_values_create`")
        # verify the required parameter 'candidate_property_value' is set
        if ('candidate_property_value' not in params) or (params['candidate_property_value'] is None):
            raise ValueError("Missing the required parameter `candidate_property_value` when calling `configuration_candidate_properties_values_create`")


        collection_formats = {}

        resource_path = '/configuration/candidate-properties/{id}/values'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'candidate_property_value' in params:
            body_params = params['candidate_property_value']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CandidatePropertyValue',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_candidate_properties_values_get(self, id, value_id, **kwargs):
        """
        Get Candidate Property value by id
        Get Candidate Property value by its id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_candidate_properties_values_get(id, value_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of candidate property (required)
        :param str value_id: Identifier of candidate property value (required)
        :return: CandidatePropertyValue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_candidate_properties_values_get_with_http_info(id, value_id, **kwargs)
        else:
            (data) = self.configuration_candidate_properties_values_get_with_http_info(id, value_id, **kwargs)
            return data

    def configuration_candidate_properties_values_get_with_http_info(self, id, value_id, **kwargs):
        """
        Get Candidate Property value by id
        Get Candidate Property value by its id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_candidate_properties_values_get_with_http_info(id, value_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of candidate property (required)
        :param str value_id: Identifier of candidate property value (required)
        :return: CandidatePropertyValue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_candidate_properties_values_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_candidate_properties_values_get`")
        # verify the required parameter 'value_id' is set
        if ('value_id' not in params) or (params['value_id'] is None):
            raise ValueError("Missing the required parameter `value_id` when calling `configuration_candidate_properties_values_get`")


        collection_formats = {}

        resource_path = '/configuration/candidate-properties/{id}/values/{valueId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'value_id' in params:
            path_params['valueId'] = params['value_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CandidatePropertyValue',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_candidate_properties_values_update(self, id, value_id, candidate_property_value_label, **kwargs):
        """
        Update candidate property value label
        Update candidate property value label
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_candidate_properties_values_update(id, value_id, candidate_property_value_label, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of candidate property (required)
        :param str value_id: Identifier of candidate property value (required)
        :param CandidatePropertyValueLabel candidate_property_value_label: Candidate property value label. (required)
        :return: CandidatePropertyValue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_candidate_properties_values_update_with_http_info(id, value_id, candidate_property_value_label, **kwargs)
        else:
            (data) = self.configuration_candidate_properties_values_update_with_http_info(id, value_id, candidate_property_value_label, **kwargs)
            return data

    def configuration_candidate_properties_values_update_with_http_info(self, id, value_id, candidate_property_value_label, **kwargs):
        """
        Update candidate property value label
        Update candidate property value label
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_candidate_properties_values_update_with_http_info(id, value_id, candidate_property_value_label, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of candidate property (required)
        :param str value_id: Identifier of candidate property value (required)
        :param CandidatePropertyValueLabel candidate_property_value_label: Candidate property value label. (required)
        :return: CandidatePropertyValue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value_id', 'candidate_property_value_label']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_candidate_properties_values_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_candidate_properties_values_update`")
        # verify the required parameter 'value_id' is set
        if ('value_id' not in params) or (params['value_id'] is None):
            raise ValueError("Missing the required parameter `value_id` when calling `configuration_candidate_properties_values_update`")
        # verify the required parameter 'candidate_property_value_label' is set
        if ('candidate_property_value_label' not in params) or (params['candidate_property_value_label'] is None):
            raise ValueError("Missing the required parameter `candidate_property_value_label` when calling `configuration_candidate_properties_values_update`")


        collection_formats = {}

        resource_path = '/configuration/candidate-properties/{id}/values/{valueId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'value_id' in params:
            path_params['valueId'] = params['value_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'candidate_property_value_label' in params:
            body_params = params['candidate_property_value_label']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CandidatePropertyValue',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_company_my(self, **kwargs):
        """
        Get company information
        Get all information about your company.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_company_my(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: CompanyConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_company_my_with_http_info(**kwargs)
        else:
            (data) = self.configuration_company_my_with_http_info(**kwargs)
            return data

    def configuration_company_my_with_http_info(self, **kwargs):
        """
        Get company information
        Get all information about your company.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_company_my_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: CompanyConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_company_my" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/configuration/company'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CompanyConfiguration',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_department_all(self, **kwargs):
        """
        Get departments
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_department_all(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Departments
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_department_all_with_http_info(**kwargs)
        else:
            (data) = self.configuration_department_all_with_http_info(**kwargs)
            return data

    def configuration_department_all_with_http_info(self, **kwargs):
        """
        Get departments
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_department_all_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Departments
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_department_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/configuration/departments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Departments',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_department_create(self, department, **kwargs):
        """
        Creates department
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_department_create(department, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Department department: department to be created (required)
        :return: Department
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_department_create_with_http_info(department, **kwargs)
        else:
            (data) = self.configuration_department_create_with_http_info(department, **kwargs)
            return data

    def configuration_department_create_with_http_info(self, department, **kwargs):
        """
        Creates department
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_department_create_with_http_info(department, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Department department: department to be created (required)
        :return: Department
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['department']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_department_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'department' is set
        if ('department' not in params) or (params['department'] is None):
            raise ValueError("Missing the required parameter `department` when calling `configuration_department_create`")


        collection_formats = {}

        resource_path = '/configuration/departments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'department' in params:
            body_params = params['department']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Department',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_department_get(self, id, **kwargs):
        """
        Get department
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_department_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a department (required)
        :return: Department
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_department_get_with_http_info(id, **kwargs)
        else:
            (data) = self.configuration_department_get_with_http_info(id, **kwargs)
            return data

    def configuration_department_get_with_http_info(self, id, **kwargs):
        """
        Get department
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_department_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a department (required)
        :return: Department
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_department_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_department_get`")


        collection_formats = {}

        resource_path = '/configuration/departments/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Department',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_hiring_process_all(self, **kwargs):
        """
        Get list of hiring process
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_hiring_process_all(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: HiringProcesses
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_hiring_process_all_with_http_info(**kwargs)
        else:
            (data) = self.configuration_hiring_process_all_with_http_info(**kwargs)
            return data

    def configuration_hiring_process_all_with_http_info(self, **kwargs):
        """
        Get list of hiring process
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_hiring_process_all_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: HiringProcesses
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_hiring_process_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/configuration/hiring-processes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HiringProcesses',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_hiring_process_get(self, id, **kwargs):
        """
        Get hiring process
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_hiring_process_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a hiring process (required)
        :return: HiringProcess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_hiring_process_get_with_http_info(id, **kwargs)
        else:
            (data) = self.configuration_hiring_process_get_with_http_info(id, **kwargs)
            return data

    def configuration_hiring_process_get_with_http_info(self, id, **kwargs):
        """
        Get hiring process
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_hiring_process_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a hiring process (required)
        :return: HiringProcess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_hiring_process_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_hiring_process_get`")


        collection_formats = {}

        resource_path = '/configuration/hiring-processes/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HiringProcess',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_job_properties_activate(self, id, **kwargs):
        """
        Activate a job property
        Activates a job property with given id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_activate(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_job_properties_activate_with_http_info(id, **kwargs)
        else:
            (data) = self.configuration_job_properties_activate_with_http_info(id, **kwargs)
            return data

    def configuration_job_properties_activate_with_http_info(self, id, **kwargs):
        """
        Activate a job property
        Activates a job property with given id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_activate_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_job_properties_activate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_job_properties_activate`")


        collection_formats = {}

        resource_path = '/configuration/job-properties/{id}/activation'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_job_properties_all(self, **kwargs):
        """
        Get a list of available job properties
        Get a list of available job properties.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_all(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: JobPropertyDefinitionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_job_properties_all_with_http_info(**kwargs)
        else:
            (data) = self.configuration_job_properties_all_with_http_info(**kwargs)
            return data

    def configuration_job_properties_all_with_http_info(self, **kwargs):
        """
        Get a list of available job properties
        Get a list of available job properties.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_all_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: JobPropertyDefinitionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_job_properties_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/configuration/job-properties'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobPropertyDefinitionList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_job_properties_create(self, **kwargs):
        """
        Create a job property
        Creates a job property
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_create(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param JobPropertyDefinition job_property_definition: job property to be created
        :return: JobPropertyDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_job_properties_create_with_http_info(**kwargs)
        else:
            (data) = self.configuration_job_properties_create_with_http_info(**kwargs)
            return data

    def configuration_job_properties_create_with_http_info(self, **kwargs):
        """
        Create a job property
        Creates a job property
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_create_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param JobPropertyDefinition job_property_definition: job property to be created
        :return: JobPropertyDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_property_definition']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_job_properties_create" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/configuration/job-properties'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'job_property_definition' in params:
            body_params = params['job_property_definition']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobPropertyDefinition',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_job_properties_deactivate(self, id, **kwargs):
        """
        Deactivate a job property
        Deactivates a job property.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_deactivate(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_job_properties_deactivate_with_http_info(id, **kwargs)
        else:
            (data) = self.configuration_job_properties_deactivate_with_http_info(id, **kwargs)
            return data

    def configuration_job_properties_deactivate_with_http_info(self, id, **kwargs):
        """
        Deactivate a job property
        Deactivates a job property.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_deactivate_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_job_properties_deactivate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_job_properties_deactivate`")


        collection_formats = {}

        resource_path = '/configuration/job-properties/{id}/activation'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_job_properties_dependents_all(self, id, **kwargs):
        """
        Get job property's dependents
        Get list of job property's dependents
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_dependents_all(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :return: DependentJobProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_job_properties_dependents_all_with_http_info(id, **kwargs)
        else:
            (data) = self.configuration_job_properties_dependents_all_with_http_info(id, **kwargs)
            return data

    def configuration_job_properties_dependents_all_with_http_info(self, id, **kwargs):
        """
        Get job property's dependents
        Get list of job property's dependents
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_dependents_all_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :return: DependentJobProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_job_properties_dependents_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_job_properties_dependents_all`")


        collection_formats = {}

        resource_path = '/configuration/job-properties/{id}/dependents'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DependentJobProperties',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_job_properties_dependents_create(self, id, dependent_job_properties_ids, **kwargs):
        """
        Create job property dependents
        Create dependencies between job properties
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_dependents_create(id, dependent_job_properties_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param DependentJobPropertiesIds dependent_job_properties_ids: Job properties' id (required)
        :return: DependentJobProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_job_properties_dependents_create_with_http_info(id, dependent_job_properties_ids, **kwargs)
        else:
            (data) = self.configuration_job_properties_dependents_create_with_http_info(id, dependent_job_properties_ids, **kwargs)
            return data

    def configuration_job_properties_dependents_create_with_http_info(self, id, dependent_job_properties_ids, **kwargs):
        """
        Create job property dependents
        Create dependencies between job properties
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_dependents_create_with_http_info(id, dependent_job_properties_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param DependentJobPropertiesIds dependent_job_properties_ids: Job properties' id (required)
        :return: DependentJobProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'dependent_job_properties_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_job_properties_dependents_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_job_properties_dependents_create`")
        # verify the required parameter 'dependent_job_properties_ids' is set
        if ('dependent_job_properties_ids' not in params) or (params['dependent_job_properties_ids'] is None):
            raise ValueError("Missing the required parameter `dependent_job_properties_ids` when calling `configuration_job_properties_dependents_create`")


        collection_formats = {}

        resource_path = '/configuration/job-properties/{id}/dependents'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dependent_job_properties_ids' in params:
            body_params = params['dependent_job_properties_ids']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DependentJobProperties',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_job_properties_dependents_remove(self, id, dependent_id, **kwargs):
        """
        Remove job property's dependent
        Remove dependency between job properties
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_dependents_remove(id, dependent_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param str dependent_id: Identifier of a job property's dependent (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_job_properties_dependents_remove_with_http_info(id, dependent_id, **kwargs)
        else:
            (data) = self.configuration_job_properties_dependents_remove_with_http_info(id, dependent_id, **kwargs)
            return data

    def configuration_job_properties_dependents_remove_with_http_info(self, id, dependent_id, **kwargs):
        """
        Remove job property's dependent
        Remove dependency between job properties
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_dependents_remove_with_http_info(id, dependent_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param str dependent_id: Identifier of a job property's dependent (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'dependent_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_job_properties_dependents_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_job_properties_dependents_remove`")
        # verify the required parameter 'dependent_id' is set
        if ('dependent_id' not in params) or (params['dependent_id'] is None):
            raise ValueError("Missing the required parameter `dependent_id` when calling `configuration_job_properties_dependents_remove`")


        collection_formats = {}

        resource_path = '/configuration/job-properties/{id}/dependents/{dependentId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'dependent_id' in params:
            path_params['dependentId'] = params['dependent_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_job_properties_dependents_values_add(self, id, value_id, dependent_id, dependent_job_property_value_id, **kwargs):
        """
        Add job property's dependent value
        Add job property's dependent value for specific job property's value
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_dependents_values_add(id, value_id, dependent_id, dependent_job_property_value_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param str value_id: Identifier of a job property value (required)
        :param str dependent_id: Identifier of job property's dependent (required)
        :param Identifiable dependent_job_property_value_id: Identifier of job property's dependent value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_job_properties_dependents_values_add_with_http_info(id, value_id, dependent_id, dependent_job_property_value_id, **kwargs)
        else:
            (data) = self.configuration_job_properties_dependents_values_add_with_http_info(id, value_id, dependent_id, dependent_job_property_value_id, **kwargs)
            return data

    def configuration_job_properties_dependents_values_add_with_http_info(self, id, value_id, dependent_id, dependent_job_property_value_id, **kwargs):
        """
        Add job property's dependent value
        Add job property's dependent value for specific job property's value
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_dependents_values_add_with_http_info(id, value_id, dependent_id, dependent_job_property_value_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param str value_id: Identifier of a job property value (required)
        :param str dependent_id: Identifier of job property's dependent (required)
        :param Identifiable dependent_job_property_value_id: Identifier of job property's dependent value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value_id', 'dependent_id', 'dependent_job_property_value_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_job_properties_dependents_values_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_job_properties_dependents_values_add`")
        # verify the required parameter 'value_id' is set
        if ('value_id' not in params) or (params['value_id'] is None):
            raise ValueError("Missing the required parameter `value_id` when calling `configuration_job_properties_dependents_values_add`")
        # verify the required parameter 'dependent_id' is set
        if ('dependent_id' not in params) or (params['dependent_id'] is None):
            raise ValueError("Missing the required parameter `dependent_id` when calling `configuration_job_properties_dependents_values_add`")
        # verify the required parameter 'dependent_job_property_value_id' is set
        if ('dependent_job_property_value_id' not in params) or (params['dependent_job_property_value_id'] is None):
            raise ValueError("Missing the required parameter `dependent_job_property_value_id` when calling `configuration_job_properties_dependents_values_add`")


        collection_formats = {}

        resource_path = '/configuration/job-properties/{id}/values/{valueId}/dependents/{dependentId}/values'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'value_id' in params:
            path_params['valueId'] = params['value_id']
        if 'dependent_id' in params:
            path_params['dependentId'] = params['dependent_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dependent_job_property_value_id' in params:
            body_params = params['dependent_job_property_value_id']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_job_properties_dependents_values_all(self, id, dependent_id, **kwargs):
        """
        Get dependent job property's values
        Get dependent job property's values with corelation to the parent field.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_dependents_values_all(id, dependent_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param str dependent_id: Identifier of dependent job property (required)
        :return: DependentJobPropertyValuesRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_job_properties_dependents_values_all_with_http_info(id, dependent_id, **kwargs)
        else:
            (data) = self.configuration_job_properties_dependents_values_all_with_http_info(id, dependent_id, **kwargs)
            return data

    def configuration_job_properties_dependents_values_all_with_http_info(self, id, dependent_id, **kwargs):
        """
        Get dependent job property's values
        Get dependent job property's values with corelation to the parent field.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_dependents_values_all_with_http_info(id, dependent_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param str dependent_id: Identifier of dependent job property (required)
        :return: DependentJobPropertyValuesRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'dependent_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_job_properties_dependents_values_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_job_properties_dependents_values_all`")
        # verify the required parameter 'dependent_id' is set
        if ('dependent_id' not in params) or (params['dependent_id'] is None):
            raise ValueError("Missing the required parameter `dependent_id` when calling `configuration_job_properties_dependents_values_all`")


        collection_formats = {}

        resource_path = '/configuration/job-properties/{id}/dependents/{dependentId}/values'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'dependent_id' in params:
            path_params['dependentId'] = params['dependent_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DependentJobPropertyValuesRelations',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_job_properties_dependents_values_get(self, id, value_id, dependent_id, **kwargs):
        """
        Get job property's dependent values
        Get list of job property's dependent values for specific job property's value
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_dependents_values_get(id, value_id, dependent_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param str value_id: Identifier of a job property value (required)
        :param str dependent_id: Identifier of job property's dependent (required)
        :return: DependentJobPropertyValues
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_job_properties_dependents_values_get_with_http_info(id, value_id, dependent_id, **kwargs)
        else:
            (data) = self.configuration_job_properties_dependents_values_get_with_http_info(id, value_id, dependent_id, **kwargs)
            return data

    def configuration_job_properties_dependents_values_get_with_http_info(self, id, value_id, dependent_id, **kwargs):
        """
        Get job property's dependent values
        Get list of job property's dependent values for specific job property's value
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_dependents_values_get_with_http_info(id, value_id, dependent_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param str value_id: Identifier of a job property value (required)
        :param str dependent_id: Identifier of job property's dependent (required)
        :return: DependentJobPropertyValues
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value_id', 'dependent_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_job_properties_dependents_values_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_job_properties_dependents_values_get`")
        # verify the required parameter 'value_id' is set
        if ('value_id' not in params) or (params['value_id'] is None):
            raise ValueError("Missing the required parameter `value_id` when calling `configuration_job_properties_dependents_values_get`")
        # verify the required parameter 'dependent_id' is set
        if ('dependent_id' not in params) or (params['dependent_id'] is None):
            raise ValueError("Missing the required parameter `dependent_id` when calling `configuration_job_properties_dependents_values_get`")


        collection_formats = {}

        resource_path = '/configuration/job-properties/{id}/values/{valueId}/dependents/{dependentId}/values'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'value_id' in params:
            path_params['valueId'] = params['value_id']
        if 'dependent_id' in params:
            path_params['dependentId'] = params['dependent_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DependentJobPropertyValues',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_job_properties_dependents_values_remove(self, id, value_id, dependent_id, dependent_value_id, **kwargs):
        """
        Remove job property's dependent values relationship
        Remove relationship between dependent job properties values
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_dependents_values_remove(id, value_id, dependent_id, dependent_value_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param str value_id: Identifier of a job property value (required)
        :param str dependent_id: Identifier of job property's dependent (required)
        :param str dependent_value_id: Identifier of job property's dependent value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_job_properties_dependents_values_remove_with_http_info(id, value_id, dependent_id, dependent_value_id, **kwargs)
        else:
            (data) = self.configuration_job_properties_dependents_values_remove_with_http_info(id, value_id, dependent_id, dependent_value_id, **kwargs)
            return data

    def configuration_job_properties_dependents_values_remove_with_http_info(self, id, value_id, dependent_id, dependent_value_id, **kwargs):
        """
        Remove job property's dependent values relationship
        Remove relationship between dependent job properties values
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_dependents_values_remove_with_http_info(id, value_id, dependent_id, dependent_value_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param str value_id: Identifier of a job property value (required)
        :param str dependent_id: Identifier of job property's dependent (required)
        :param str dependent_value_id: Identifier of job property's dependent value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value_id', 'dependent_id', 'dependent_value_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_job_properties_dependents_values_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_job_properties_dependents_values_remove`")
        # verify the required parameter 'value_id' is set
        if ('value_id' not in params) or (params['value_id'] is None):
            raise ValueError("Missing the required parameter `value_id` when calling `configuration_job_properties_dependents_values_remove`")
        # verify the required parameter 'dependent_id' is set
        if ('dependent_id' not in params) or (params['dependent_id'] is None):
            raise ValueError("Missing the required parameter `dependent_id` when calling `configuration_job_properties_dependents_values_remove`")
        # verify the required parameter 'dependent_value_id' is set
        if ('dependent_value_id' not in params) or (params['dependent_value_id'] is None):
            raise ValueError("Missing the required parameter `dependent_value_id` when calling `configuration_job_properties_dependents_values_remove`")


        collection_formats = {}

        resource_path = '/configuration/job-properties/{id}/values/{valueId}/dependents/{dependentId}/values/{dependentValueId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'value_id' in params:
            path_params['valueId'] = params['value_id']
        if 'dependent_id' in params:
            path_params['dependentId'] = params['dependent_id']
        if 'dependent_value_id' in params:
            path_params['dependentValueId'] = params['dependent_value_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_job_properties_get(self, id, **kwargs):
        """
        Get job property by id
        Get job property by id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :return: JobPropertyDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_job_properties_get_with_http_info(id, **kwargs)
        else:
            (data) = self.configuration_job_properties_get_with_http_info(id, **kwargs)
            return data

    def configuration_job_properties_get_with_http_info(self, id, **kwargs):
        """
        Get job property by id
        Get job property by id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :return: JobPropertyDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_job_properties_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_job_properties_get`")


        collection_formats = {}

        resource_path = '/configuration/job-properties/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobPropertyDefinition',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_job_properties_update(self, id, **kwargs):
        """
        Update a job property
        Updates a job property.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_update(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param JSONPatch json_patch: patch request
        :return: JobPropertyDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_job_properties_update_with_http_info(id, **kwargs)
        else:
            (data) = self.configuration_job_properties_update_with_http_info(id, **kwargs)
            return data

    def configuration_job_properties_update_with_http_info(self, id, **kwargs):
        """
        Update a job property
        Updates a job property.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_update_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param JSONPatch json_patch: patch request
        :return: JobPropertyDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'json_patch']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_job_properties_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_job_properties_update`")


        collection_formats = {}

        resource_path = '/configuration/job-properties/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'json_patch' in params:
            body_params = params['json_patch']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json-patch+json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobPropertyDefinition',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_job_properties_values_archive(self, id, value_id, **kwargs):
        """
        Archive a job property value
        Archive a job property value
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_values_archive(id, value_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param str value_id: Identifier of a job property value to be archived (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_job_properties_values_archive_with_http_info(id, value_id, **kwargs)
        else:
            (data) = self.configuration_job_properties_values_archive_with_http_info(id, value_id, **kwargs)
            return data

    def configuration_job_properties_values_archive_with_http_info(self, id, value_id, **kwargs):
        """
        Archive a job property value
        Archive a job property value
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_values_archive_with_http_info(id, value_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param str value_id: Identifier of a job property value to be archived (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_job_properties_values_archive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_job_properties_values_archive`")
        # verify the required parameter 'value_id' is set
        if ('value_id' not in params) or (params['value_id'] is None):
            raise ValueError("Missing the required parameter `value_id` when calling `configuration_job_properties_values_archive`")


        collection_formats = {}

        resource_path = '/configuration/job-properties/{id}/archive-values/{valueId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'value_id' in params:
            path_params['valueId'] = params['value_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_job_properties_values_create(self, id, **kwargs):
        """
        Create a job property value
        Creates a job property value.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_values_create(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param JobPropertyValueDefinition job_property_value_definition: job property object to be created
        :return: JobPropertyValueDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_job_properties_values_create_with_http_info(id, **kwargs)
        else:
            (data) = self.configuration_job_properties_values_create_with_http_info(id, **kwargs)
            return data

    def configuration_job_properties_values_create_with_http_info(self, id, **kwargs):
        """
        Create a job property value
        Creates a job property value.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_values_create_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param JobPropertyValueDefinition job_property_value_definition: job property object to be created
        :return: JobPropertyValueDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'job_property_value_definition']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_job_properties_values_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_job_properties_values_create`")


        collection_formats = {}

        resource_path = '/configuration/job-properties/{id}/values'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'job_property_value_definition' in params:
            body_params = params['job_property_value_definition']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobPropertyValueDefinition',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_job_properties_values_deprecated_archive(self, id, value_id, **kwargs):
        """
        Archive a job property value
        Archive a job property value. Please use `PUT /configuration/job-properties/{id}/archive-values/{valueId}` instead.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_values_deprecated_archive(id, value_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param str value_id: Identifier of a job property value to be archived (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_job_properties_values_deprecated_archive_with_http_info(id, value_id, **kwargs)
        else:
            (data) = self.configuration_job_properties_values_deprecated_archive_with_http_info(id, value_id, **kwargs)
            return data

    def configuration_job_properties_values_deprecated_archive_with_http_info(self, id, value_id, **kwargs):
        """
        Archive a job property value
        Archive a job property value. Please use `PUT /configuration/job-properties/{id}/archive-values/{valueId}` instead.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_values_deprecated_archive_with_http_info(id, value_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param str value_id: Identifier of a job property value to be archived (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_job_properties_values_deprecated_archive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_job_properties_values_deprecated_archive`")
        # verify the required parameter 'value_id' is set
        if ('value_id' not in params) or (params['value_id'] is None):
            raise ValueError("Missing the required parameter `value_id` when calling `configuration_job_properties_values_deprecated_archive`")


        collection_formats = {}

        resource_path = '/configuration/job-properties/{id}/values/{valueId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'value_id' in params:
            path_params['valueId'] = params['value_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_job_properties_values_deprecated_unarchive(self, id, value_id, **kwargs):
        """
        Unarchive a job property value
        Unarchive a job property value. `DELETE /configuration/job-properties/{id}/archive-values/{valueId}` instead.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_values_deprecated_unarchive(id, value_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param str value_id: Identifier of a job property value to be unarchived (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_job_properties_values_deprecated_unarchive_with_http_info(id, value_id, **kwargs)
        else:
            (data) = self.configuration_job_properties_values_deprecated_unarchive_with_http_info(id, value_id, **kwargs)
            return data

    def configuration_job_properties_values_deprecated_unarchive_with_http_info(self, id, value_id, **kwargs):
        """
        Unarchive a job property value
        Unarchive a job property value. `DELETE /configuration/job-properties/{id}/archive-values/{valueId}` instead.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_values_deprecated_unarchive_with_http_info(id, value_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param str value_id: Identifier of a job property value to be unarchived (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_job_properties_values_deprecated_unarchive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_job_properties_values_deprecated_unarchive`")
        # verify the required parameter 'value_id' is set
        if ('value_id' not in params) or (params['value_id'] is None):
            raise ValueError("Missing the required parameter `value_id` when calling `configuration_job_properties_values_deprecated_unarchive`")


        collection_formats = {}

        resource_path = '/configuration/job-properties/{id}/values/{valueId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'value_id' in params:
            path_params['valueId'] = params['value_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_job_properties_values_get(self, id, **kwargs):
        """
        Get available job property values
        Get available job property values.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_values_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :return: JobPropertyValueDefinitionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_job_properties_values_get_with_http_info(id, **kwargs)
        else:
            (data) = self.configuration_job_properties_values_get_with_http_info(id, **kwargs)
            return data

    def configuration_job_properties_values_get_with_http_info(self, id, **kwargs):
        """
        Get available job property values
        Get available job property values.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_values_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :return: JobPropertyValueDefinitionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_job_properties_values_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_job_properties_values_get`")


        collection_formats = {}

        resource_path = '/configuration/job-properties/{id}/values'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobPropertyValueDefinitionList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_job_properties_values_unarchive(self, id, value_id, **kwargs):
        """
        Unarchive a job property value
        Unarchive a job property value
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_values_unarchive(id, value_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param str value_id: Identifier of a job property value to be unarchived (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_job_properties_values_unarchive_with_http_info(id, value_id, **kwargs)
        else:
            (data) = self.configuration_job_properties_values_unarchive_with_http_info(id, value_id, **kwargs)
            return data

    def configuration_job_properties_values_unarchive_with_http_info(self, id, value_id, **kwargs):
        """
        Unarchive a job property value
        Unarchive a job property value
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_values_unarchive_with_http_info(id, value_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param str value_id: Identifier of a job property value to be unarchived (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_job_properties_values_unarchive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_job_properties_values_unarchive`")
        # verify the required parameter 'value_id' is set
        if ('value_id' not in params) or (params['value_id'] is None):
            raise ValueError("Missing the required parameter `value_id` when calling `configuration_job_properties_values_unarchive`")


        collection_formats = {}

        resource_path = '/configuration/job-properties/{id}/archive-values/{valueId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'value_id' in params:
            path_params['valueId'] = params['value_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_job_properties_values_update(self, id, value_id, **kwargs):
        """
        Update a job property value
        Update a job property value. Returns an updated job property value object.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_values_update(id, value_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param str value_id: Identifier of a job property value to be updated (required)
        :param JSONPatch json_patch: patch request
        :return: JobPropertyValueDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_job_properties_values_update_with_http_info(id, value_id, **kwargs)
        else:
            (data) = self.configuration_job_properties_values_update_with_http_info(id, value_id, **kwargs)
            return data

    def configuration_job_properties_values_update_with_http_info(self, id, value_id, **kwargs):
        """
        Update a job property value
        Update a job property value. Returns an updated job property value object.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_job_properties_values_update_with_http_info(id, value_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a job property (required)
        :param str value_id: Identifier of a job property value to be updated (required)
        :param JSONPatch json_patch: patch request
        :return: JobPropertyValueDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value_id', 'json_patch']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_job_properties_values_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configuration_job_properties_values_update`")
        # verify the required parameter 'value_id' is set
        if ('value_id' not in params) or (params['value_id'] is None):
            raise ValueError("Missing the required parameter `value_id` when calling `configuration_job_properties_values_update`")


        collection_formats = {}

        resource_path = '/configuration/job-properties/{id}/values/{valueId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'value_id' in params:
            path_params['valueId'] = params['value_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'json_patch' in params:
            body_params = params['json_patch']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json-patch+json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='JobPropertyValueDefinition',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_offer_properties_all(self, **kwargs):
        """
        Get a list of available offer properties
        Get a list of available offer properties.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_offer_properties_all(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: OfferPropertiesDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_offer_properties_all_with_http_info(**kwargs)
        else:
            (data) = self.configuration_offer_properties_all_with_http_info(**kwargs)
            return data

    def configuration_offer_properties_all_with_http_info(self, **kwargs):
        """
        Get a list of available offer properties
        Get a list of available offer properties.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_offer_properties_all_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: OfferPropertiesDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_offer_properties_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/configuration/offer-properties'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OfferPropertiesDefinition',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_reasons_rejection_all(self, **kwargs):
        """
        Get rejection reasons
        Get rejection reasons
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_reasons_rejection_all(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_reasons_rejection_all_with_http_info(**kwargs)
        else:
            (data) = self.configuration_reasons_rejection_all_with_http_info(**kwargs)
            return data

    def configuration_reasons_rejection_all_with_http_info(self, **kwargs):
        """
        Get rejection reasons
        Get rejection reasons
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_reasons_rejection_all_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_reasons_rejection_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/configuration/rejection-reasons'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Properties',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_reasons_withdrawal_all(self, **kwargs):
        """
        Get withdrawal reasons
        Get withdrawal reasons
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_reasons_withdrawal_all(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_reasons_withdrawal_all_with_http_info(**kwargs)
        else:
            (data) = self.configuration_reasons_withdrawal_all_with_http_info(**kwargs)
            return data

    def configuration_reasons_withdrawal_all_with_http_info(self, **kwargs):
        """
        Get withdrawal reasons
        Get withdrawal reasons
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_reasons_withdrawal_all_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Properties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_reasons_withdrawal_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/configuration/withdrawal-reasons'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Properties',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_source_types(self, **kwargs):
        """
        List candidate source types with subtypes
        Get a list of all available candidate source type with subtypes
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_source_types(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: SourceTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_source_types_with_http_info(**kwargs)
        else:
            (data) = self.configuration_source_types_with_http_info(**kwargs)
            return data

    def configuration_source_types_with_http_info(self, **kwargs):
        """
        List candidate source types with subtypes
        Get a list of all available candidate source type with subtypes
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_source_types_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: SourceTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_source_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/configuration/sources'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SourceTypes',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_source_values_all(self, source_type, **kwargs):
        """
        List candidate sources
        Get a list of all available candidate sources by type.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_source_values_all(source_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str source_type: Source type from /configuration/sources (required)
        :param str source_sub_type: Source SubType
        :param int limit: number of elements to return. max value is 100
        :param int offset: number of elements to skip while processing result
        :return: Sources
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_source_values_all_with_http_info(source_type, **kwargs)
        else:
            (data) = self.configuration_source_values_all_with_http_info(source_type, **kwargs)
            return data

    def configuration_source_values_all_with_http_info(self, source_type, **kwargs):
        """
        List candidate sources
        Get a list of all available candidate sources by type.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_source_values_all_with_http_info(source_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str source_type: Source type from /configuration/sources (required)
        :param str source_sub_type: Source SubType
        :param int limit: number of elements to return. max value is 100
        :param int offset: number of elements to skip while processing result
        :return: Sources
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_type', 'source_sub_type', 'limit', 'offset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_source_values_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_type' is set
        if ('source_type' not in params) or (params['source_type'] is None):
            raise ValueError("Missing the required parameter `source_type` when calling `configuration_source_values_all`")

        if 'limit' in params and params['limit'] > 100:
            raise ValueError("Invalid value for parameter `limit` when calling `configuration_source_values_all`, must be a value less than or equal to `100`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `configuration_source_values_all`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `configuration_source_values_all`, must be a value greater than or equal to `0`")

        collection_formats = {}

        resource_path = '/configuration/sources/{sourceType}/values'.replace('{format}', 'json')
        path_params = {}
        if 'source_type' in params:
            path_params['sourceType'] = params['source_type']

        query_params = {}
        if 'source_sub_type' in params:
            query_params['sourceSubType'] = params['source_sub_type']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Sources',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def configuration_source_values_single(self, source_type, source_value_id, **kwargs):
        """
        Get a candidate source
        Get a single candidate sources for a given type.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_source_values_single(source_type, source_value_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str source_type: Source type from /configuration/sources (required)
        :param str source_value_id: Source id (required)
        :param str source_sub_type: Source SubType from  /configuration/sources
        :return: Source
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.configuration_source_values_single_with_http_info(source_type, source_value_id, **kwargs)
        else:
            (data) = self.configuration_source_values_single_with_http_info(source_type, source_value_id, **kwargs)
            return data

    def configuration_source_values_single_with_http_info(self, source_type, source_value_id, **kwargs):
        """
        Get a candidate source
        Get a single candidate sources for a given type.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configuration_source_values_single_with_http_info(source_type, source_value_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str source_type: Source type from /configuration/sources (required)
        :param str source_value_id: Source id (required)
        :param str source_sub_type: Source SubType from  /configuration/sources
        :return: Source
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_type', 'source_value_id', 'source_sub_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_source_values_single" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_type' is set
        if ('source_type' not in params) or (params['source_type'] is None):
            raise ValueError("Missing the required parameter `source_type` when calling `configuration_source_values_single`")
        # verify the required parameter 'source_value_id' is set
        if ('source_value_id' not in params) or (params['source_value_id'] is None):
            raise ValueError("Missing the required parameter `source_value_id` when calling `configuration_source_values_single`")


        collection_formats = {}

        resource_path = '/configuration/sources/{sourceType}/values/{sourceValueId}'.replace('{format}', 'json')
        path_params = {}
        if 'source_type' in params:
            path_params['sourceType'] = params['source_type']
        if 'source_value_id' in params:
            path_params['sourceValueId'] = params['source_value_id']

        query_params = {}
        if 'source_sub_type' in params:
            query_params['sourceSubType'] = params['source_sub_type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Source',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
