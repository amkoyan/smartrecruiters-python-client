# coding: utf-8

"""
    Customer API - version 1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CandidatesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def candidates_add(self, candidate, **kwargs):
        """
        Create a new candidate and assign to a Talent Pool
        Create a new candidate and assign to a Talent Pool.  **Tracking candidate source**  When adding a new candidate, it's very important you track its source appropriately. In order to associate a source with your app/integration, add below object to a candidate body object for this endpoint: ``` {   \"sourceDetails\": {     \"sourceTypeId\": \"string\",     \"sourceSubTypeId\": \"string\",     \"sourceId\": \"string\"   } } ``` **sourceTypeId** - it's a Source Type - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSourceTypes) endpoint  **sourceSubTypeId** - it's a Source Subtype, an optional parameter - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSourceTypes) endpoint  **sourceId** - it's a Source Id - available values for a given sourceTypeId can be found using [get /configuration/sources/:sourceTypeId/values](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSources) endpoint  NOTE: Not defining the source will default to **API** source.  NOTE II: In case you can't find an appropriate source to track against you can: * Create a custom source for each customer account separately on [this admin page](https://www.smartrecruiters.com/settings/configuration/custom-sources\\) (you need to be logged in as an admin to the customer account in order to view this page) * Request to [partners@smartrecruiters.com](mailto:partners@smartrecruiters.com) adding a standard source that will be available for all customers if your app/integration is productised (available to all SmartRecruiters customers) 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_add(candidate, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CandidateInput candidate: Candidate object that needs to be created. (required)
        :return: CandidateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_add_with_http_info(candidate, **kwargs)
        else:
            (data) = self.candidates_add_with_http_info(candidate, **kwargs)
            return data

    def candidates_add_with_http_info(self, candidate, **kwargs):
        """
        Create a new candidate and assign to a Talent Pool
        Create a new candidate and assign to a Talent Pool.  **Tracking candidate source**  When adding a new candidate, it's very important you track its source appropriately. In order to associate a source with your app/integration, add below object to a candidate body object for this endpoint: ``` {   \"sourceDetails\": {     \"sourceTypeId\": \"string\",     \"sourceSubTypeId\": \"string\",     \"sourceId\": \"string\"   } } ``` **sourceTypeId** - it's a Source Type - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSourceTypes) endpoint  **sourceSubTypeId** - it's a Source Subtype, an optional parameter - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSourceTypes) endpoint  **sourceId** - it's a Source Id - available values for a given sourceTypeId can be found using [get /configuration/sources/:sourceTypeId/values](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSources) endpoint  NOTE: Not defining the source will default to **API** source.  NOTE II: In case you can't find an appropriate source to track against you can: * Create a custom source for each customer account separately on [this admin page](https://www.smartrecruiters.com/settings/configuration/custom-sources\\) (you need to be logged in as an admin to the customer account in order to view this page) * Request to [partners@smartrecruiters.com](mailto:partners@smartrecruiters.com) adding a standard source that will be available for all customers if your app/integration is productised (available to all SmartRecruiters customers) 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_add_with_http_info(candidate, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CandidateInput candidate: Candidate object that needs to be created. (required)
        :return: CandidateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate' is set
        if ('candidate' not in params) or (params['candidate'] is None):
            raise ValueError("Missing the required parameter `candidate` when calling `candidates_add`")


        collection_formats = {}

        resource_path = '/candidates'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'candidate' in params:
            body_params = params['candidate']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CandidateDetails',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_add_to_job(self, candidate, job_id, **kwargs):
        """
        Create a new candidate and assign to a job
        Create a new candidate and assign to a job.  **Tracking candidate source**  When adding a new candidate, it's very important you track its source appropriately. In order to associate a source with your app / integration, add the below object to a candidate body object for this endpoint: ``` {   \"sourceDetails\": {     \"sourceTypeId\": \"string\",     \"sourceSubTypeId\": \"string\",     \"sourceId\": \"string\"   } } ``` **sourceTypeId** - it's a Source Type - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSourceTypes) endpoint  **sourceSubTypeId** - it's a Source Subtype, an optional parameter - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSourceTypes) endpoint  **sourceId** - it's a Source Id - available values for a given sourceTypeId can be found using [get /configuration/sources/:sourceTypeId/values](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSources) endpoint  NOTE: Not defining the source will default to **API** source.  NOTE II: In case you can't find an appropriate source to track against you can: * Create a custom source for each customer account separately on [this admin page](https://www.smartrecruiters.com/settings/configuration/custom-sources\\) (you need to be logged in as an admin to the customer account in order to view this page) * Request to [partners@smartrecruiters.com](mailto:partners@smartrecruiters.com) adding a standard source that will be available for all customers if your app / integration is productised (available to all SmartRecruiters customers) 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_add_to_job(candidate, job_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CandidateInput candidate: Candidate object that needs to be created. (required)
        :param str job_id: job identifier (required)
        :return: CandidateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_add_to_job_with_http_info(candidate, job_id, **kwargs)
        else:
            (data) = self.candidates_add_to_job_with_http_info(candidate, job_id, **kwargs)
            return data

    def candidates_add_to_job_with_http_info(self, candidate, job_id, **kwargs):
        """
        Create a new candidate and assign to a job
        Create a new candidate and assign to a job.  **Tracking candidate source**  When adding a new candidate, it's very important you track its source appropriately. In order to associate a source with your app / integration, add the below object to a candidate body object for this endpoint: ``` {   \"sourceDetails\": {     \"sourceTypeId\": \"string\",     \"sourceSubTypeId\": \"string\",     \"sourceId\": \"string\"   } } ``` **sourceTypeId** - it's a Source Type - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSourceTypes) endpoint  **sourceSubTypeId** - it's a Source Subtype, an optional parameter - available values can be found using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSourceTypes) endpoint  **sourceId** - it's a Source Id - available values for a given sourceTypeId can be found using [get /configuration/sources/:sourceTypeId/values](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSources) endpoint  NOTE: Not defining the source will default to **API** source.  NOTE II: In case you can't find an appropriate source to track against you can: * Create a custom source for each customer account separately on [this admin page](https://www.smartrecruiters.com/settings/configuration/custom-sources\\) (you need to be logged in as an admin to the customer account in order to view this page) * Request to [partners@smartrecruiters.com](mailto:partners@smartrecruiters.com) adding a standard source that will be available for all customers if your app / integration is productised (available to all SmartRecruiters customers) 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_add_to_job_with_http_info(candidate, job_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CandidateInput candidate: Candidate object that needs to be created. (required)
        :param str job_id: job identifier (required)
        :return: CandidateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate', 'job_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_add_to_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate' is set
        if ('candidate' not in params) or (params['candidate'] is None):
            raise ValueError("Missing the required parameter `candidate` when calling `candidates_add_to_job`")
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params) or (params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `candidates_add_to_job`")


        collection_formats = {}

        resource_path = '/jobs/{jobId}/candidates'.replace('{format}', 'json')
        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'candidate' in params:
            body_params = params['candidate']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CandidateDetails',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_all(self, **kwargs):
        """
        Search candidates
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_all(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q: keyword search on all candidate fields; case insensitive; e.g. java developer
        :param int limit: number of elements to return. max value is 100
        :param int offset: number of elements to skip while processing result
        :param list[str] job_id: job filter to display candidates who applied for a job [id]; can be used repeatedly;
        :param list[str] location: location keyword search which looks up a string in a candidate’s location data; can be used repeatedly; case insensitive; e.g. Krakow
        :param list[int] average_rating: average rating filter to display candidates with a specific average rating (integer); can be used repeatedly; e.g. 4
        :param list[str] status: candidate’s status filter in a context of a job; can be used repeatedly
        :param str sub_status: candidate’s sub-status filter in a context of a job. Works only in a correlation with a set value for the \"status\" field.
        :param list[str] tag: tag assigned to a candidate; can be used repeatedly; case insensitive; e.g. fluent english
        :param datetime updated_after: ISO8601-formatted time boundaries for the candidate update time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ
        :param str onboarding_status: candidate's onboarding status
        :param list[str] property_id: candidate's property id (1-N)
        :param list[str] property_value_id: candidate's property value id (1-N)
        :return: Candidates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_all_with_http_info(**kwargs)
        else:
            (data) = self.candidates_all_with_http_info(**kwargs)
            return data

    def candidates_all_with_http_info(self, **kwargs):
        """
        Search candidates
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_all_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q: keyword search on all candidate fields; case insensitive; e.g. java developer
        :param int limit: number of elements to return. max value is 100
        :param int offset: number of elements to skip while processing result
        :param list[str] job_id: job filter to display candidates who applied for a job [id]; can be used repeatedly;
        :param list[str] location: location keyword search which looks up a string in a candidate’s location data; can be used repeatedly; case insensitive; e.g. Krakow
        :param list[int] average_rating: average rating filter to display candidates with a specific average rating (integer); can be used repeatedly; e.g. 4
        :param list[str] status: candidate’s status filter in a context of a job; can be used repeatedly
        :param str sub_status: candidate’s sub-status filter in a context of a job. Works only in a correlation with a set value for the \"status\" field.
        :param list[str] tag: tag assigned to a candidate; can be used repeatedly; case insensitive; e.g. fluent english
        :param datetime updated_after: ISO8601-formatted time boundaries for the candidate update time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ
        :param str onboarding_status: candidate's onboarding status
        :param list[str] property_id: candidate's property id (1-N)
        :param list[str] property_value_id: candidate's property value id (1-N)
        :return: Candidates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'limit', 'offset', 'job_id', 'location', 'average_rating', 'status', 'sub_status', 'tag', 'updated_after', 'onboarding_status', 'property_id', 'property_value_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_all" % key
                )
            params[key] = val
        del params['kwargs']

        if 'limit' in params and params['limit'] > 100:
            raise ValueError("Invalid value for parameter `limit` when calling `candidates_all`, must be a value less than or equal to `100`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `candidates_all`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `candidates_all`, must be a value greater than or equal to `0`")

        collection_formats = {}

        resource_path = '/candidates'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'q' in params:
            query_params['q'] = params['q']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'job_id' in params:
            query_params['jobId'] = params['job_id']
            collection_formats['jobId'] = 'multi'
        if 'location' in params:
            query_params['location'] = params['location']
            collection_formats['location'] = 'multi'
        if 'average_rating' in params:
            query_params['averageRating'] = params['average_rating']
            collection_formats['averageRating'] = 'multi'
        if 'status' in params:
            query_params['status'] = params['status']
            collection_formats['status'] = 'multi'
        if 'sub_status' in params:
            query_params['subStatus'] = params['sub_status']
        if 'tag' in params:
            query_params['tag'] = params['tag']
            collection_formats['tag'] = 'multi'
        if 'updated_after' in params:
            query_params['updatedAfter'] = params['updated_after']
        if 'onboarding_status' in params:
            query_params['onboardingStatus'] = params['onboarding_status']
        if 'property_id' in params:
            query_params['propertyId'] = params['property_id']
            collection_formats['propertyId'] = 'multi'
        if 'property_value_id' in params:
            query_params['propertyValueId'] = params['property_value_id']
            collection_formats['propertyValueId'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Candidates',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_attachments_add(self, id, attachment_type, file, **kwargs):
        """
        Attach files to a candidate.
        Attach files to a candidate.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_attachments_add(id, attachment_type, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a candidate (required)
        :param str attachment_type: Type of attachment you want to upload. (required)
        :param file file: The file to upload. (required)
        :return: Attachment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_attachments_add_with_http_info(id, attachment_type, file, **kwargs)
        else:
            (data) = self.candidates_attachments_add_with_http_info(id, attachment_type, file, **kwargs)
            return data

    def candidates_attachments_add_with_http_info(self, id, attachment_type, file, **kwargs):
        """
        Attach files to a candidate.
        Attach files to a candidate.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_attachments_add_with_http_info(id, attachment_type, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a candidate (required)
        :param str attachment_type: Type of attachment you want to upload. (required)
        :param file file: The file to upload. (required)
        :return: Attachment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'attachment_type', 'file']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_attachments_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_attachments_add`")
        # verify the required parameter 'attachment_type' is set
        if ('attachment_type' not in params) or (params['attachment_type'] is None):
            raise ValueError("Missing the required parameter `attachment_type` when calling `candidates_attachments_add`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `candidates_attachments_add`")


        collection_formats = {}

        resource_path = '/candidates/{id}/attachments'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'attachment_type' in params:
            form_params.append(('attachmentType', params['attachment_type']))
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Attachment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_attachments_get(self, id, attachment_id, **kwargs):
        """
        Get a candidate's attachment.
        Get a candidate's attachment.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_attachments_get(id, attachment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a candidate (required)
        :param str attachment_id: Identifier of an attachment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_attachments_get_with_http_info(id, attachment_id, **kwargs)
        else:
            (data) = self.candidates_attachments_get_with_http_info(id, attachment_id, **kwargs)
            return data

    def candidates_attachments_get_with_http_info(self, id, attachment_id, **kwargs):
        """
        Get a candidate's attachment.
        Get a candidate's attachment.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_attachments_get_with_http_info(id, attachment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a candidate (required)
        :param str attachment_id: Identifier of an attachment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'attachment_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_attachments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_attachments_get`")
        # verify the required parameter 'attachment_id' is set
        if ('attachment_id' not in params) or (params['attachment_id'] is None):
            raise ValueError("Missing the required parameter `attachment_id` when calling `candidates_attachments_get`")


        collection_formats = {}

        resource_path = '/candidates/{id}/attachments/{attachmentId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'attachment_id' in params:
            path_params['attachmentId'] = params['attachment_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_attachments_list(self, id, **kwargs):
        """
        Get list candidate's attachments.
        Get list of candidate's attachments.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_attachments_list(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a candidate (required)
        :return: Attachments
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_attachments_list_with_http_info(id, **kwargs)
        else:
            (data) = self.candidates_attachments_list_with_http_info(id, **kwargs)
            return data

    def candidates_attachments_list_with_http_info(self, id, **kwargs):
        """
        Get list candidate's attachments.
        Get list of candidate's attachments.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_attachments_list_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a candidate (required)
        :return: Attachments
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_attachments_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_attachments_list`")


        collection_formats = {}

        resource_path = '/candidates/{id}/attachments'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Attachments',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_delete(self, id, **kwargs):
        """
        Delete Candidate
        Delete candidate
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_delete_with_http_info(id, **kwargs)
        else:
            (data) = self.candidates_delete_with_http_info(id, **kwargs)
            return data

    def candidates_delete_with_http_info(self, id, **kwargs):
        """
        Delete Candidate
        Delete candidate
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_delete`")


        collection_formats = {}

        resource_path = '/candidates/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_get(self, id, **kwargs):
        """
        Get details of a candidate
        Get details of a candidate
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :return: CandidateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_get_with_http_info(id, **kwargs)
        else:
            (data) = self.candidates_get_with_http_info(id, **kwargs)
            return data

    def candidates_get_with_http_info(self, id, **kwargs):
        """
        Get details of a candidate
        Get details of a candidate
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :return: CandidateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_get`")


        collection_formats = {}

        resource_path = '/candidates/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CandidateDetails',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_onboarding_get(self, id, **kwargs):
        """
        Get Onboarding Status for a candidate
        Get Onboarding Status for a candidate.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_onboarding_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a candidate (required)
        :return: OnboardingStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_onboarding_get_with_http_info(id, **kwargs)
        else:
            (data) = self.candidates_onboarding_get_with_http_info(id, **kwargs)
            return data

    def candidates_onboarding_get_with_http_info(self, id, **kwargs):
        """
        Get Onboarding Status for a candidate
        Get Onboarding Status for a candidate.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_onboarding_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a candidate (required)
        :return: OnboardingStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_onboarding_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_onboarding_get`")


        collection_formats = {}

        resource_path = '/candidates/{id}/onboardingStatus'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OnboardingStatus',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_onboarding_get_for_job(self, id, job_id, **kwargs):
        """
        Get Onboarding Status for a candidate associated with given job
        Get Onboarding Status for a candidate associated with given job.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_onboarding_get_for_job(id, job_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a candidate (required)
        :param str job_id: Identifier of a job (required)
        :return: OnboardingStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_onboarding_get_for_job_with_http_info(id, job_id, **kwargs)
        else:
            (data) = self.candidates_onboarding_get_for_job_with_http_info(id, job_id, **kwargs)
            return data

    def candidates_onboarding_get_for_job_with_http_info(self, id, job_id, **kwargs):
        """
        Get Onboarding Status for a candidate associated with given job
        Get Onboarding Status for a candidate associated with given job.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_onboarding_get_for_job_with_http_info(id, job_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a candidate (required)
        :param str job_id: Identifier of a job (required)
        :return: OnboardingStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'job_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_onboarding_get_for_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_onboarding_get_for_job`")
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params) or (params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `candidates_onboarding_get_for_job`")


        collection_formats = {}

        resource_path = '/candidates/{id}/jobs/{jobId}/onboardingStatus'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OnboardingStatus',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_onboarding_update(self, id, onboarding_status, **kwargs):
        """
        Set Onboarding Status for a candidate
        Set Onboarding Status for a candidate.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_onboarding_update(id, onboarding_status, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a candidate (required)
        :param OnboardingStatus onboarding_status: Onboarding status. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_onboarding_update_with_http_info(id, onboarding_status, **kwargs)
        else:
            (data) = self.candidates_onboarding_update_with_http_info(id, onboarding_status, **kwargs)
            return data

    def candidates_onboarding_update_with_http_info(self, id, onboarding_status, **kwargs):
        """
        Set Onboarding Status for a candidate
        Set Onboarding Status for a candidate.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_onboarding_update_with_http_info(id, onboarding_status, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a candidate (required)
        :param OnboardingStatus onboarding_status: Onboarding status. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'onboarding_status']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_onboarding_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_onboarding_update`")
        # verify the required parameter 'onboarding_status' is set
        if ('onboarding_status' not in params) or (params['onboarding_status'] is None):
            raise ValueError("Missing the required parameter `onboarding_status` when calling `candidates_onboarding_update`")


        collection_formats = {}

        resource_path = '/candidates/{id}/onboardingStatus'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'onboarding_status' in params:
            body_params = params['onboarding_status']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_onboarding_update_for_job(self, id, job_id, onboarding_status, **kwargs):
        """
        Sets Onboarding Status for a candidate associated with given job
        Sets Onboarding Status for a candidate associated with given job.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_onboarding_update_for_job(id, job_id, onboarding_status, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a candidate (required)
        :param str job_id: Identifier of a job (required)
        :param OnboardingStatus onboarding_status: Onboarding status. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_onboarding_update_for_job_with_http_info(id, job_id, onboarding_status, **kwargs)
        else:
            (data) = self.candidates_onboarding_update_for_job_with_http_info(id, job_id, onboarding_status, **kwargs)
            return data

    def candidates_onboarding_update_for_job_with_http_info(self, id, job_id, onboarding_status, **kwargs):
        """
        Sets Onboarding Status for a candidate associated with given job
        Sets Onboarding Status for a candidate associated with given job.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_onboarding_update_for_job_with_http_info(id, job_id, onboarding_status, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a candidate (required)
        :param str job_id: Identifier of a job (required)
        :param OnboardingStatus onboarding_status: Onboarding status. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'job_id', 'onboarding_status']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_onboarding_update_for_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_onboarding_update_for_job`")
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params) or (params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `candidates_onboarding_update_for_job`")
        # verify the required parameter 'onboarding_status' is set
        if ('onboarding_status' not in params) or (params['onboarding_status'] is None):
            raise ValueError("Missing the required parameter `onboarding_status` when calling `candidates_onboarding_update_for_job`")


        collection_formats = {}

        resource_path = '/candidates/{id}/jobs/{jobId}/onboardingStatus'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'onboarding_status' in params:
            body_params = params['onboarding_status']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_properties_get(self, id, **kwargs):
        """
        Get candidate property values for a candidate
        Returns ``` {} ``` when there is no value set for a candidate property. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_properties_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: candidate identifier (required)
        :param str context: context for candidate properties to display
        :return: CandidateProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_properties_get_with_http_info(id, **kwargs)
        else:
            (data) = self.candidates_properties_get_with_http_info(id, **kwargs)
            return data

    def candidates_properties_get_with_http_info(self, id, **kwargs):
        """
        Get candidate property values for a candidate
        Returns ``` {} ``` when there is no value set for a candidate property. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_properties_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: candidate identifier (required)
        :param str context: context for candidate properties to display
        :return: CandidateProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'context']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_properties_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_properties_get`")


        collection_formats = {}

        resource_path = '/candidates/{id}/properties'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'context' in params:
            query_params['context'] = params['context']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CandidateProperties',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_properties_get_for_job(self, id, job_id, **kwargs):
        """
        Get candidate property values for a candidate's job
        Returns ``` {} ``` when there is no value set for a candidate property. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_properties_get_for_job(id, job_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :param str job_id: Identifier of a Job (required)
        :param str context: context for candidate properties to display
        :return: CandidateProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_properties_get_for_job_with_http_info(id, job_id, **kwargs)
        else:
            (data) = self.candidates_properties_get_for_job_with_http_info(id, job_id, **kwargs)
            return data

    def candidates_properties_get_for_job_with_http_info(self, id, job_id, **kwargs):
        """
        Get candidate property values for a candidate's job
        Returns ``` {} ``` when there is no value set for a candidate property. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_properties_get_for_job_with_http_info(id, job_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :param str job_id: Identifier of a Job (required)
        :param str context: context for candidate properties to display
        :return: CandidateProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'job_id', 'context']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_properties_get_for_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_properties_get_for_job`")
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params) or (params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `candidates_properties_get_for_job`")


        collection_formats = {}

        resource_path = '/candidates/{id}/jobs/{jobId}/properties'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']

        query_params = {}
        if 'context' in params:
            query_params['context'] = params['context']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CandidateProperties',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_properties_values_update(self, id, property_id, **kwargs):
        """
        Add/update candidate property value
        Set a candidate property value for the candidate. Below you can find a list of value examples, dependent on different candidate property types. * **BOOLEAN** ``` { \"value\": true } ``` Value has to be `true` or `false`. * **COUNTRY** ``` { \"value\": \"us\" } ``` Value has to be lowercase string in ISO 3166-1 alpha-2 format. * **CURRENCY** ``` {   \"value\": {     \"code\": \"GBP\",     \"value\": 23232   } } ``` Code of value is a currency code in ISO 4217 format. * **DATE** ``` { \"value\": \"2015-11-17T23:00:00.000Z\" } ``` * **NUMBER, PERCENT** ``` { \"value\": 42 } ``` * **REGION** ``` { \"value\": \"us-wa\" } ``` Value has to be lowercase string in ISO 3166-2 compatible format. * **SINGLE_SELECT** ``` { \"value\": \"f6fe768f-b5e6-4794-9938-c2f42ab0a572\" } ``` Value has to be an id of candidate property value (provided by GET /configuration/candidate-properties/{propertyId}/values). * **TEXT** ``` { \"value\": \"Example text\" } ``` * **USER** ``` { \"value\": \"50fe861de4b00265edec6775\" } ``` Value has to be a valid user id  To reset a value for any of the above types, please pass ``` {} ``` 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_properties_values_update(id, property_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :param str property_id: Identifier of a Candidate Property (required)
        :param CandidatePropertyInputValue candidate_property_input_value: Input value of the candidate property.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_properties_values_update_with_http_info(id, property_id, **kwargs)
        else:
            (data) = self.candidates_properties_values_update_with_http_info(id, property_id, **kwargs)
            return data

    def candidates_properties_values_update_with_http_info(self, id, property_id, **kwargs):
        """
        Add/update candidate property value
        Set a candidate property value for the candidate. Below you can find a list of value examples, dependent on different candidate property types. * **BOOLEAN** ``` { \"value\": true } ``` Value has to be `true` or `false`. * **COUNTRY** ``` { \"value\": \"us\" } ``` Value has to be lowercase string in ISO 3166-1 alpha-2 format. * **CURRENCY** ``` {   \"value\": {     \"code\": \"GBP\",     \"value\": 23232   } } ``` Code of value is a currency code in ISO 4217 format. * **DATE** ``` { \"value\": \"2015-11-17T23:00:00.000Z\" } ``` * **NUMBER, PERCENT** ``` { \"value\": 42 } ``` * **REGION** ``` { \"value\": \"us-wa\" } ``` Value has to be lowercase string in ISO 3166-2 compatible format. * **SINGLE_SELECT** ``` { \"value\": \"f6fe768f-b5e6-4794-9938-c2f42ab0a572\" } ``` Value has to be an id of candidate property value (provided by GET /configuration/candidate-properties/{propertyId}/values). * **TEXT** ``` { \"value\": \"Example text\" } ``` * **USER** ``` { \"value\": \"50fe861de4b00265edec6775\" } ``` Value has to be a valid user id  To reset a value for any of the above types, please pass ``` {} ``` 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_properties_values_update_with_http_info(id, property_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :param str property_id: Identifier of a Candidate Property (required)
        :param CandidatePropertyInputValue candidate_property_input_value: Input value of the candidate property.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'property_id', 'candidate_property_input_value']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_properties_values_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_properties_values_update`")
        # verify the required parameter 'property_id' is set
        if ('property_id' not in params) or (params['property_id'] is None):
            raise ValueError("Missing the required parameter `property_id` when calling `candidates_properties_values_update`")


        collection_formats = {}

        resource_path = '/candidates/{id}/properties/{propertyId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'property_id' in params:
            path_params['propertyId'] = params['property_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'candidate_property_input_value' in params:
            body_params = params['candidate_property_input_value']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_properties_values_update_for_job(self, id, job_id, property_id, **kwargs):
        """
        Add/update candidate property value
        Set a candidate property value for the candidate. Below you can find a list of value examples, dependent on different candidate property types. * **BOOLEAN** ``` { \"value\": true } ``` Value has to be `true` or `false`. * **COUNTRY** ``` { \"value\": \"us\" } ``` Value has to be lowercase string in ISO 3166-1 alpha-2 format. * **CURRENCY** ``` {   \"value\": {     \"code\": \"GBP\",     \"value\": 23232   } } ``` Code of value is a currency code in ISO 4217 format. * **DATE** ``` { \"value\": \"2015-11-17T23:00:00.000Z\" } ``` * **NUMBER, PERCENT** ``` { \"value\": 42 } ``` * **REGION** ``` { \"value\": \"us-wa\" } ``` Value has to be lowercase string in ISO 3166-2 compatible format. * **SINGLE_SELECT** ``` { \"value\": \"f6fe768f-b5e6-4794-9938-c2f42ab0a572\" } ``` Value has to be an id of candidate property value (provided by GET /configuration/candidate-properties/{propertyId}/values). * **TEXT** ``` { \"value\": \"Example text\" } ``` * **USER** ``` { \"value\": \"50fe861de4b00265edec6775\" } ``` Value has to be a valid user id  To reset a value for any of the above types, please pass ``` {} ``` 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_properties_values_update_for_job(id, job_id, property_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :param str job_id: Identifier of a Job (required)
        :param str property_id: Identifier of a Candidate Property (required)
        :param CandidatePropertyInputValue candidate_property_input_value: Input value of the candidate property.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_properties_values_update_for_job_with_http_info(id, job_id, property_id, **kwargs)
        else:
            (data) = self.candidates_properties_values_update_for_job_with_http_info(id, job_id, property_id, **kwargs)
            return data

    def candidates_properties_values_update_for_job_with_http_info(self, id, job_id, property_id, **kwargs):
        """
        Add/update candidate property value
        Set a candidate property value for the candidate. Below you can find a list of value examples, dependent on different candidate property types. * **BOOLEAN** ``` { \"value\": true } ``` Value has to be `true` or `false`. * **COUNTRY** ``` { \"value\": \"us\" } ``` Value has to be lowercase string in ISO 3166-1 alpha-2 format. * **CURRENCY** ``` {   \"value\": {     \"code\": \"GBP\",     \"value\": 23232   } } ``` Code of value is a currency code in ISO 4217 format. * **DATE** ``` { \"value\": \"2015-11-17T23:00:00.000Z\" } ``` * **NUMBER, PERCENT** ``` { \"value\": 42 } ``` * **REGION** ``` { \"value\": \"us-wa\" } ``` Value has to be lowercase string in ISO 3166-2 compatible format. * **SINGLE_SELECT** ``` { \"value\": \"f6fe768f-b5e6-4794-9938-c2f42ab0a572\" } ``` Value has to be an id of candidate property value (provided by GET /configuration/candidate-properties/{propertyId}/values). * **TEXT** ``` { \"value\": \"Example text\" } ``` * **USER** ``` { \"value\": \"50fe861de4b00265edec6775\" } ``` Value has to be a valid user id  To reset a value for any of the above types, please pass ``` {} ``` 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_properties_values_update_for_job_with_http_info(id, job_id, property_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :param str job_id: Identifier of a Job (required)
        :param str property_id: Identifier of a Candidate Property (required)
        :param CandidatePropertyInputValue candidate_property_input_value: Input value of the candidate property.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'job_id', 'property_id', 'candidate_property_input_value']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_properties_values_update_for_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_properties_values_update_for_job`")
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params) or (params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `candidates_properties_values_update_for_job`")
        # verify the required parameter 'property_id' is set
        if ('property_id' not in params) or (params['property_id'] is None):
            raise ValueError("Missing the required parameter `property_id` when calling `candidates_properties_values_update_for_job`")


        collection_formats = {}

        resource_path = '/candidates/{id}/jobs/{jobId}/properties/{propertyId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']
        if 'property_id' in params:
            path_params['propertyId'] = params['property_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'candidate_property_input_value' in params:
            body_params = params['candidate_property_input_value']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_resume_add(self, file, **kwargs):
        """
        Parse a resume, create a candidate and assign to a Talent Pool.
        Parse a resume, create a candidate and assign to a Talent Pool.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_resume_add(file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: The resume file to parse. (required)
        :param str source_type_id: Candidate Source type id
        :param str source_sub_type_id: Candidate Source subtype id
        :param str source_id: Candidate Source id
        :param bool internal: Mark as company employee
        :return: CandidateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_resume_add_with_http_info(file, **kwargs)
        else:
            (data) = self.candidates_resume_add_with_http_info(file, **kwargs)
            return data

    def candidates_resume_add_with_http_info(self, file, **kwargs):
        """
        Parse a resume, create a candidate and assign to a Talent Pool.
        Parse a resume, create a candidate and assign to a Talent Pool.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_resume_add_with_http_info(file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: The resume file to parse. (required)
        :param str source_type_id: Candidate Source type id
        :param str source_sub_type_id: Candidate Source subtype id
        :param str source_id: Candidate Source id
        :param bool internal: Mark as company employee
        :return: CandidateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'source_type_id', 'source_sub_type_id', 'source_id', 'internal']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_resume_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `candidates_resume_add`")


        collection_formats = {}

        resource_path = '/candidates/cv'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'source_type_id' in params:
            form_params.append(('sourceTypeId', params['source_type_id']))
        if 'source_sub_type_id' in params:
            form_params.append(('sourceSubTypeId', params['source_sub_type_id']))
        if 'source_id' in params:
            form_params.append(('sourceId', params['source_id']))
        if 'internal' in params:
            form_params.append(('internal', params['internal']))
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CandidateDetails',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_resume_add_to_job(self, file, job_id, **kwargs):
        """
        Parse a resume, create a candidate and assign to a job.
        Parse a resume, create a candidate and assign to a job.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_resume_add_to_job(file, job_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: The resume file to parse. (required)
        :param str job_id: Identifier of a Job (required)
        :param str source_type_id: Candidate Source type id
        :param str source_sub_type_id: Candidate Source subtype id
        :param str source_id: Candidate Source id
        :param bool internal: Mark as company employee
        :return: CandidateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_resume_add_to_job_with_http_info(file, job_id, **kwargs)
        else:
            (data) = self.candidates_resume_add_to_job_with_http_info(file, job_id, **kwargs)
            return data

    def candidates_resume_add_to_job_with_http_info(self, file, job_id, **kwargs):
        """
        Parse a resume, create a candidate and assign to a job.
        Parse a resume, create a candidate and assign to a job.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_resume_add_to_job_with_http_info(file, job_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: The resume file to parse. (required)
        :param str job_id: Identifier of a Job (required)
        :param str source_type_id: Candidate Source type id
        :param str source_sub_type_id: Candidate Source subtype id
        :param str source_id: Candidate Source id
        :param bool internal: Mark as company employee
        :return: CandidateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'job_id', 'source_type_id', 'source_sub_type_id', 'source_id', 'internal']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_resume_add_to_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `candidates_resume_add_to_job`")
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params) or (params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `candidates_resume_add_to_job`")


        collection_formats = {}

        resource_path = '/jobs/{jobId}/candidates/cv'.replace('{format}', 'json')
        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'source_type_id' in params:
            form_params.append(('sourceTypeId', params['source_type_id']))
        if 'source_sub_type_id' in params:
            form_params.append(('sourceSubTypeId', params['source_sub_type_id']))
        if 'source_id' in params:
            form_params.append(('sourceId', params['source_id']))
        if 'internal' in params:
            form_params.append(('internal', params['internal']))
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CandidateDetails',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_screening_answers_get(self, id, job_id, **kwargs):
        """
        Get candidate screening answers for a candidate's job
        Returns candidate screening question answers for a candidate's job. Returns an empty array when there is no screening answers for given candidate's job.  UUID in question category indicates custom question. Other value indicates predefined library question.  In order to create human readable format of answers please use label properties. Ignore labels for answers with single field. Based on labels from included example you can get following text:  ```text Do you have a current driver's license?  - No  Free text question  - Long text answer for free text questions  Checkbox question  - Confirmed  Legacy acknowledgment question - replaced by checkbox  - Confirmed  Gender, Race and Ethnicity [(definitions)](https://smartrecruiters.com/oneclick/static/html/en/eeoGeneral.html)  - Gender: Male  - Race/Ethnicity: Prefer not to answer  Currency question  - 1234  Multiple choice dropdown  - third value, second value, first value  Languages  1)  - Language: English  - Proficiency level: Advanced  2)  - Language: Spanish  - Proficiency level: Beginner  3)  - Language: French  - Proficiency level: Intermediate  What are your preferred work shifts? 1)  - Day: Weekdays  - From: 08:00 AM  - To: 04:00 PM 2)  - Day: Weekdays  - From: 10:00 AM  - To: 02:00 PM  Your Name  - John ``` 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_screening_answers_get(id, job_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :param str job_id: Identifier of a Job (required)
        :return: ScreeningAnswers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_screening_answers_get_with_http_info(id, job_id, **kwargs)
        else:
            (data) = self.candidates_screening_answers_get_with_http_info(id, job_id, **kwargs)
            return data

    def candidates_screening_answers_get_with_http_info(self, id, job_id, **kwargs):
        """
        Get candidate screening answers for a candidate's job
        Returns candidate screening question answers for a candidate's job. Returns an empty array when there is no screening answers for given candidate's job.  UUID in question category indicates custom question. Other value indicates predefined library question.  In order to create human readable format of answers please use label properties. Ignore labels for answers with single field. Based on labels from included example you can get following text:  ```text Do you have a current driver's license?  - No  Free text question  - Long text answer for free text questions  Checkbox question  - Confirmed  Legacy acknowledgment question - replaced by checkbox  - Confirmed  Gender, Race and Ethnicity [(definitions)](https://smartrecruiters.com/oneclick/static/html/en/eeoGeneral.html)  - Gender: Male  - Race/Ethnicity: Prefer not to answer  Currency question  - 1234  Multiple choice dropdown  - third value, second value, first value  Languages  1)  - Language: English  - Proficiency level: Advanced  2)  - Language: Spanish  - Proficiency level: Beginner  3)  - Language: French  - Proficiency level: Intermediate  What are your preferred work shifts? 1)  - Day: Weekdays  - From: 08:00 AM  - To: 04:00 PM 2)  - Day: Weekdays  - From: 10:00 AM  - To: 02:00 PM  Your Name  - John ``` 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_screening_answers_get_with_http_info(id, job_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :param str job_id: Identifier of a Job (required)
        :return: ScreeningAnswers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'job_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_screening_answers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_screening_answers_get`")
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params) or (params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `candidates_screening_answers_get`")


        collection_formats = {}

        resource_path = '/candidates/{id}/jobs/{jobId}/screening-answers'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ScreeningAnswers',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_source_update(self, id, job_id, candidate_source, **kwargs):
        """
        Update a candidate's source
        Update a candidate's source
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_source_update(id, job_id, candidate_source, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :param str job_id: Identifier of a Job (required)
        :param CandidateSource candidate_source: Candidate source to be set (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_source_update_with_http_info(id, job_id, candidate_source, **kwargs)
        else:
            (data) = self.candidates_source_update_with_http_info(id, job_id, candidate_source, **kwargs)
            return data

    def candidates_source_update_with_http_info(self, id, job_id, candidate_source, **kwargs):
        """
        Update a candidate's source
        Update a candidate's source
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_source_update_with_http_info(id, job_id, candidate_source, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :param str job_id: Identifier of a Job (required)
        :param CandidateSource candidate_source: Candidate source to be set (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'job_id', 'candidate_source']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_source_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_source_update`")
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params) or (params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `candidates_source_update`")
        # verify the required parameter 'candidate_source' is set
        if ('candidate_source' not in params) or (params['candidate_source'] is None):
            raise ValueError("Missing the required parameter `candidate_source` when calling `candidates_source_update`")


        collection_formats = {}

        resource_path = '/candidates/{id}/jobs/{jobId}/source'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'candidate_source' in params:
            body_params = params['candidate_source']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_status_history_get(self, id, **kwargs):
        """
        Get candidate's status history
        Get candidate's status history
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_status_history_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :return: CandidateStatusHistoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_status_history_get_with_http_info(id, **kwargs)
        else:
            (data) = self.candidates_status_history_get_with_http_info(id, **kwargs)
            return data

    def candidates_status_history_get_with_http_info(self, id, **kwargs):
        """
        Get candidate's status history
        Get candidate's status history
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_status_history_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :return: CandidateStatusHistoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_status_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_status_history_get`")


        collection_formats = {}

        resource_path = '/candidates/{id}/status/history'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CandidateStatusHistoryList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_status_update(self, id, job_id, **kwargs):
        """
        Update a candidate's status
        Update a candidate's status
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_status_update(id, job_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :param str job_id: Identifier of a Job (required)
        :param CandidateStatus candidate_status: Candidate Status to be set
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_status_update_with_http_info(id, job_id, **kwargs)
        else:
            (data) = self.candidates_status_update_with_http_info(id, job_id, **kwargs)
            return data

    def candidates_status_update_with_http_info(self, id, job_id, **kwargs):
        """
        Update a candidate's status
        Update a candidate's status
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_status_update_with_http_info(id, job_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :param str job_id: Identifier of a Job (required)
        :param CandidateStatus candidate_status: Candidate Status to be set
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'job_id', 'candidate_status']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_status_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_status_update`")
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params) or (params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `candidates_status_update`")


        collection_formats = {}

        resource_path = '/candidates/{id}/jobs/{jobId}/status'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'candidate_status' in params:
            body_params = params['candidate_status']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_status_update_primary(self, id, **kwargs):
        """
        Update a candidate's status on primary assignment
        Update a candidate's status on primary assignment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_status_update_primary(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :param CandidateStatus candidate_status: Candidate Status to be set
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_status_update_primary_with_http_info(id, **kwargs)
        else:
            (data) = self.candidates_status_update_primary_with_http_info(id, **kwargs)
            return data

    def candidates_status_update_primary_with_http_info(self, id, **kwargs):
        """
        Update a candidate's status on primary assignment
        Update a candidate's status on primary assignment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_status_update_primary_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :param CandidateStatus candidate_status: Candidate Status to be set
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'candidate_status']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_status_update_primary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_status_update_primary`")


        collection_formats = {}

        resource_path = '/candidates/{id}/status'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'candidate_status' in params:
            body_params = params['candidate_status']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_tags_add(self, id, candidate_tags, **kwargs):
        """
        Add tags to a candidate
        Add new tags to a given candidate. It doesn't replace existing tags.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_tags_add(id, candidate_tags, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :param CandidateTags candidate_tags: Tags to be added. (required)
        :return: CandidateTags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_tags_add_with_http_info(id, candidate_tags, **kwargs)
        else:
            (data) = self.candidates_tags_add_with_http_info(id, candidate_tags, **kwargs)
            return data

    def candidates_tags_add_with_http_info(self, id, candidate_tags, **kwargs):
        """
        Add tags to a candidate
        Add new tags to a given candidate. It doesn't replace existing tags.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_tags_add_with_http_info(id, candidate_tags, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :param CandidateTags candidate_tags: Tags to be added. (required)
        :return: CandidateTags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'candidate_tags']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_tags_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_tags_add`")
        # verify the required parameter 'candidate_tags' is set
        if ('candidate_tags' not in params) or (params['candidate_tags'] is None):
            raise ValueError("Missing the required parameter `candidate_tags` when calling `candidates_tags_add`")


        collection_formats = {}

        resource_path = '/candidates/{id}/tags'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'candidate_tags' in params:
            body_params = params['candidate_tags']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CandidateTags',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_tags_delete(self, id, **kwargs):
        """
        Delete tags for a candidate
        Delete tags for a given candidate. All tags associated with a candidate are removed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_tags_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_tags_delete_with_http_info(id, **kwargs)
        else:
            (data) = self.candidates_tags_delete_with_http_info(id, **kwargs)
            return data

    def candidates_tags_delete_with_http_info(self, id, **kwargs):
        """
        Delete tags for a candidate
        Delete tags for a given candidate. All tags associated with a candidate are removed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_tags_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_tags_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_tags_delete`")


        collection_formats = {}

        resource_path = '/candidates/{id}/tags'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_tags_get(self, id, **kwargs):
        """
        Get tags for a candidate
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_tags_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :return: CandidateTags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_tags_get_with_http_info(id, **kwargs)
        else:
            (data) = self.candidates_tags_get_with_http_info(id, **kwargs)
            return data

    def candidates_tags_get_with_http_info(self, id, **kwargs):
        """
        Get tags for a candidate
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_tags_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :return: CandidateTags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_tags_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_tags_get`")


        collection_formats = {}

        resource_path = '/candidates/{id}/tags'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CandidateTags',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_tags_replace(self, id, candidate_tags, **kwargs):
        """
        Update tags for a candidate
        Update tags for a given candidate. It replaces all existing tags with the new array provided.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_tags_replace(id, candidate_tags, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :param CandidateTags candidate_tags: Tags to be set. (required)
        :return: CandidateTags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_tags_replace_with_http_info(id, candidate_tags, **kwargs)
        else:
            (data) = self.candidates_tags_replace_with_http_info(id, candidate_tags, **kwargs)
            return data

    def candidates_tags_replace_with_http_info(self, id, candidate_tags, **kwargs):
        """
        Update tags for a candidate
        Update tags for a given candidate. It replaces all existing tags with the new array provided.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_tags_replace_with_http_info(id, candidate_tags, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a Candidate (required)
        :param CandidateTags candidate_tags: Tags to be set. (required)
        :return: CandidateTags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'candidate_tags']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_tags_replace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_tags_replace`")
        # verify the required parameter 'candidate_tags' is set
        if ('candidate_tags' not in params) or (params['candidate_tags'] is None):
            raise ValueError("Missing the required parameter `candidate_tags` when calling `candidates_tags_replace`")


        collection_formats = {}

        resource_path = '/candidates/{id}/tags'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'candidate_tags' in params:
            body_params = params['candidate_tags']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CandidateTags',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def candidates_update(self, id, **kwargs):
        """
        Update candidate personal information
        Update candidate details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_update(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a candidate (required)
        :param PersonalDetails personal_details: Candidate personal information
        :return: CandidateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.candidates_update_with_http_info(id, **kwargs)
        else:
            (data) = self.candidates_update_with_http_info(id, **kwargs)
            return data

    def candidates_update_with_http_info(self, id, **kwargs):
        """
        Update candidate personal information
        Update candidate details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.candidates_update_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identifier of a candidate (required)
        :param PersonalDetails personal_details: Candidate personal information
        :return: CandidateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'personal_details']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method candidates_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `candidates_update`")


        collection_formats = {}

        resource_path = '/candidates/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'personal_details' in params:
            body_params = params['personal_details']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['key']

        return self.api_client.call_api(resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CandidateDetails',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
