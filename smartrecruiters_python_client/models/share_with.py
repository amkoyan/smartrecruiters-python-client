# coding: utf-8

"""
    Unofficial python library for the SmartRecruiters API

    The SmartRecruiters API provides a platform to integrate services or applications, build apps and create fully customizable career sites. It exposes SmartRecruiters functionality and allows to connect and build software enhancing it.

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ShareWith(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, users=None, hiring_team_of=None, everyone=None, open_note=None):
        """
        ShareWith - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'users': 'list[str]',
            'hiring_team_of': 'list[str]',
            'everyone': 'bool',
            'open_note': 'bool'
        }

        self.attribute_map = {
            'users': 'users',
            'hiring_team_of': 'hiringTeamOf',
            'everyone': 'everyone',
            'open_note': 'openNote'
        }

        self._users = users
        self._hiring_team_of = hiring_team_of
        self._everyone = everyone
        self._open_note = open_note

    @property
    def users(self):
        """
        Gets the users of this ShareWith.
        List of users to share the message with

        :return: The users of this ShareWith.
        :rtype: list[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """
        Sets the users of this ShareWith.
        List of users to share the message with

        :param users: The users of this ShareWith.
        :type: list[str]
        """

        self._users = users

    @property
    def hiring_team_of(self):
        """
        Gets the hiring_team_of of this ShareWith.
        List of jobs to share the message with its hiring teams

        :return: The hiring_team_of of this ShareWith.
        :rtype: list[str]
        """
        return self._hiring_team_of

    @hiring_team_of.setter
    def hiring_team_of(self, hiring_team_of):
        """
        Sets the hiring_team_of of this ShareWith.
        List of jobs to share the message with its hiring teams

        :param hiring_team_of: The hiring_team_of of this ShareWith.
        :type: list[str]
        """

        self._hiring_team_of = hiring_team_of

    @property
    def everyone(self):
        """
        Gets the everyone of this ShareWith.
        Set the message to be visible to everyone in a company

        :return: The everyone of this ShareWith.
        :rtype: bool
        """
        return self._everyone

    @everyone.setter
    def everyone(self, everyone):
        """
        Sets the everyone of this ShareWith.
        Set the message to be visible to everyone in a company

        :param everyone: The everyone of this ShareWith.
        :type: bool
        """

        self._everyone = everyone

    @property
    def open_note(self):
        """
        Gets the open_note of this ShareWith.
        Set the message to be visible to everyone in a company who has access to #-tagged candidate

        :return: The open_note of this ShareWith.
        :rtype: bool
        """
        return self._open_note

    @open_note.setter
    def open_note(self, open_note):
        """
        Sets the open_note of this ShareWith.
        Set the message to be visible to everyone in a company who has access to #-tagged candidate

        :param open_note: The open_note of this ShareWith.
        :type: bool
        """

        self._open_note = open_note

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ShareWith):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
