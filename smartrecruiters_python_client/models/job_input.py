# coding: utf-8

"""
    Unofficial python library for the SmartRecruiters API

    The SmartRecruiters API provides a platform to integrate services or applications, build apps and create fully customizable career sites. It exposes SmartRecruiters functionality and allows to connect and build software enhancing it.

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class JobInput(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, title=None, ref_number=None, target_hiring_date=None, department=None, location=None, industry=None, function=None, type_of_employment=None, experience_level=None, eeo_category=None, template=None, compensation=None, job_ad=None, properties=None):
        """
        JobInput - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'title': 'str',
            'ref_number': 'str',
            'target_hiring_date': 'datetime',
            'department': 'Identifiable',
            'location': 'JobLocationInput',
            'industry': 'Identifiable',
            'function': 'Identifiable',
            'type_of_employment': 'Identifiable',
            'experience_level': 'Identifiable',
            'eeo_category': 'Identifiable',
            'template': 'bool',
            'compensation': 'Compensation',
            'job_ad': 'JobAd',
            'properties': 'list[JobPropertyInput]'
        }

        self.attribute_map = {
            'title': 'title',
            'ref_number': 'refNumber',
            'target_hiring_date': 'targetHiringDate',
            'department': 'department',
            'location': 'location',
            'industry': 'industry',
            'function': 'function',
            'type_of_employment': 'typeOfEmployment',
            'experience_level': 'experienceLevel',
            'eeo_category': 'eeoCategory',
            'template': 'template',
            'compensation': 'compensation',
            'job_ad': 'jobAd',
            'properties': 'properties'
        }

        self._title = title
        self._ref_number = ref_number
        self._target_hiring_date = target_hiring_date
        self._department = department
        self._location = location
        self._industry = industry
        self._function = function
        self._type_of_employment = type_of_employment
        self._experience_level = experience_level
        self._eeo_category = eeo_category
        self._template = template
        self._compensation = compensation
        self._job_ad = job_ad
        self._properties = properties

    @property
    def title(self):
        """
        Gets the title of this JobInput.

        :return: The title of this JobInput.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this JobInput.

        :param title: The title of this JobInput.
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) > 256:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `256`")

        self._title = title

    @property
    def ref_number(self):
        """
        Gets the ref_number of this JobInput.

        :return: The ref_number of this JobInput.
        :rtype: str
        """
        return self._ref_number

    @ref_number.setter
    def ref_number(self, ref_number):
        """
        Sets the ref_number of this JobInput.

        :param ref_number: The ref_number of this JobInput.
        :type: str
        """
        if ref_number is not None and len(ref_number) > 63:
            raise ValueError("Invalid value for `ref_number`, length must be less than or equal to `63`")

        self._ref_number = ref_number

    @property
    def target_hiring_date(self):
        """
        Gets the target_hiring_date of this JobInput.

        :return: The target_hiring_date of this JobInput.
        :rtype: datetime
        """
        return self._target_hiring_date

    @target_hiring_date.setter
    def target_hiring_date(self, target_hiring_date):
        """
        Sets the target_hiring_date of this JobInput.

        :param target_hiring_date: The target_hiring_date of this JobInput.
        :type: datetime
        """

        self._target_hiring_date = target_hiring_date

    @property
    def department(self):
        """
        Gets the department of this JobInput.

        :return: The department of this JobInput.
        :rtype: Identifiable
        """
        return self._department

    @department.setter
    def department(self, department):
        """
        Sets the department of this JobInput.

        :param department: The department of this JobInput.
        :type: Identifiable
        """

        self._department = department

    @property
    def location(self):
        """
        Gets the location of this JobInput.

        :return: The location of this JobInput.
        :rtype: JobLocationInput
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this JobInput.

        :param location: The location of this JobInput.
        :type: JobLocationInput
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def industry(self):
        """
        Gets the industry of this JobInput.

        :return: The industry of this JobInput.
        :rtype: Identifiable
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """
        Sets the industry of this JobInput.

        :param industry: The industry of this JobInput.
        :type: Identifiable
        """
        if industry is None:
            raise ValueError("Invalid value for `industry`, must not be `None`")

        self._industry = industry

    @property
    def function(self):
        """
        Gets the function of this JobInput.

        :return: The function of this JobInput.
        :rtype: Identifiable
        """
        return self._function

    @function.setter
    def function(self, function):
        """
        Sets the function of this JobInput.

        :param function: The function of this JobInput.
        :type: Identifiable
        """
        if function is None:
            raise ValueError("Invalid value for `function`, must not be `None`")

        self._function = function

    @property
    def type_of_employment(self):
        """
        Gets the type_of_employment of this JobInput.

        :return: The type_of_employment of this JobInput.
        :rtype: Identifiable
        """
        return self._type_of_employment

    @type_of_employment.setter
    def type_of_employment(self, type_of_employment):
        """
        Sets the type_of_employment of this JobInput.

        :param type_of_employment: The type_of_employment of this JobInput.
        :type: Identifiable
        """

        self._type_of_employment = type_of_employment

    @property
    def experience_level(self):
        """
        Gets the experience_level of this JobInput.

        :return: The experience_level of this JobInput.
        :rtype: Identifiable
        """
        return self._experience_level

    @experience_level.setter
    def experience_level(self, experience_level):
        """
        Sets the experience_level of this JobInput.

        :param experience_level: The experience_level of this JobInput.
        :type: Identifiable
        """
        if experience_level is None:
            raise ValueError("Invalid value for `experience_level`, must not be `None`")

        self._experience_level = experience_level

    @property
    def eeo_category(self):
        """
        Gets the eeo_category of this JobInput.

        :return: The eeo_category of this JobInput.
        :rtype: Identifiable
        """
        return self._eeo_category

    @eeo_category.setter
    def eeo_category(self, eeo_category):
        """
        Sets the eeo_category of this JobInput.

        :param eeo_category: The eeo_category of this JobInput.
        :type: Identifiable
        """

        self._eeo_category = eeo_category

    @property
    def template(self):
        """
        Gets the template of this JobInput.

        :return: The template of this JobInput.
        :rtype: bool
        """
        return self._template

    @template.setter
    def template(self, template):
        """
        Sets the template of this JobInput.

        :param template: The template of this JobInput.
        :type: bool
        """

        self._template = template

    @property
    def compensation(self):
        """
        Gets the compensation of this JobInput.

        :return: The compensation of this JobInput.
        :rtype: Compensation
        """
        return self._compensation

    @compensation.setter
    def compensation(self, compensation):
        """
        Sets the compensation of this JobInput.

        :param compensation: The compensation of this JobInput.
        :type: Compensation
        """

        self._compensation = compensation

    @property
    def job_ad(self):
        """
        Gets the job_ad of this JobInput.

        :return: The job_ad of this JobInput.
        :rtype: JobAd
        """
        return self._job_ad

    @job_ad.setter
    def job_ad(self, job_ad):
        """
        Sets the job_ad of this JobInput.

        :param job_ad: The job_ad of this JobInput.
        :type: JobAd
        """

        self._job_ad = job_ad

    @property
    def properties(self):
        """
        Gets the properties of this JobInput.

        :return: The properties of this JobInput.
        :rtype: list[JobPropertyInput]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this JobInput.

        :param properties: The properties of this JobInput.
        :type: list[JobPropertyInput]
        """

        self._properties = properties

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, JobInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
