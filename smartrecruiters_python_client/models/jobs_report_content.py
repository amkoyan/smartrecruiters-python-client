# coding: utf-8

"""
    Customer API - version 1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class JobsReportContent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, job_id=None, job_ref_id=None, job_title=None, job_create_date=None, job_department=None, job_status=None, job_open_positions=None, candidates_rejected=None, candidates_withdrawn=None, candidates_in_review=None, candidates_interview=None, candidates_offer=None, candidates_total=None, candidates_hired=None, location_country=None, location_state=None, location_city=None, location_latitude=None, location_longitude=None):
        """
        JobsReportContent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'job_id': 'str',
            'job_ref_id': 'str',
            'job_title': 'str',
            'job_create_date': 'str',
            'job_department': 'str',
            'job_status': 'ValidJobStatus',
            'job_open_positions': 'int',
            'candidates_rejected': 'int',
            'candidates_withdrawn': 'int',
            'candidates_in_review': 'int',
            'candidates_interview': 'int',
            'candidates_offer': 'int',
            'candidates_total': 'int',
            'candidates_hired': 'int',
            'location_country': 'str',
            'location_state': 'str',
            'location_city': 'str',
            'location_latitude': 'float',
            'location_longitude': 'float'
        }

        self.attribute_map = {
            'job_id': 'jobId',
            'job_ref_id': 'jobRefId',
            'job_title': 'jobTitle',
            'job_create_date': 'jobCreateDate',
            'job_department': 'jobDepartment',
            'job_status': 'jobStatus',
            'job_open_positions': 'jobOpenPositions',
            'candidates_rejected': 'candidatesRejected',
            'candidates_withdrawn': 'candidatesWithdrawn',
            'candidates_in_review': 'candidatesInReview',
            'candidates_interview': 'candidatesInterview',
            'candidates_offer': 'candidatesOffer',
            'candidates_total': 'candidatesTotal',
            'candidates_hired': 'candidatesHired',
            'location_country': 'locationCountry',
            'location_state': 'locationState',
            'location_city': 'locationCity',
            'location_latitude': 'locationLatitude',
            'location_longitude': 'locationLongitude'
        }

        self._job_id = job_id
        self._job_ref_id = job_ref_id
        self._job_title = job_title
        self._job_create_date = job_create_date
        self._job_department = job_department
        self._job_status = job_status
        self._job_open_positions = job_open_positions
        self._candidates_rejected = candidates_rejected
        self._candidates_withdrawn = candidates_withdrawn
        self._candidates_in_review = candidates_in_review
        self._candidates_interview = candidates_interview
        self._candidates_offer = candidates_offer
        self._candidates_total = candidates_total
        self._candidates_hired = candidates_hired
        self._location_country = location_country
        self._location_state = location_state
        self._location_city = location_city
        self._location_latitude = location_latitude
        self._location_longitude = location_longitude

    @property
    def job_id(self):
        """
        Gets the job_id of this JobsReportContent.

        :return: The job_id of this JobsReportContent.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """
        Sets the job_id of this JobsReportContent.

        :param job_id: The job_id of this JobsReportContent.
        :type: str
        """

        self._job_id = job_id

    @property
    def job_ref_id(self):
        """
        Gets the job_ref_id of this JobsReportContent.

        :return: The job_ref_id of this JobsReportContent.
        :rtype: str
        """
        return self._job_ref_id

    @job_ref_id.setter
    def job_ref_id(self, job_ref_id):
        """
        Sets the job_ref_id of this JobsReportContent.

        :param job_ref_id: The job_ref_id of this JobsReportContent.
        :type: str
        """

        self._job_ref_id = job_ref_id

    @property
    def job_title(self):
        """
        Gets the job_title of this JobsReportContent.

        :return: The job_title of this JobsReportContent.
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """
        Sets the job_title of this JobsReportContent.

        :param job_title: The job_title of this JobsReportContent.
        :type: str
        """

        self._job_title = job_title

    @property
    def job_create_date(self):
        """
        Gets the job_create_date of this JobsReportContent.

        :return: The job_create_date of this JobsReportContent.
        :rtype: str
        """
        return self._job_create_date

    @job_create_date.setter
    def job_create_date(self, job_create_date):
        """
        Sets the job_create_date of this JobsReportContent.

        :param job_create_date: The job_create_date of this JobsReportContent.
        :type: str
        """

        self._job_create_date = job_create_date

    @property
    def job_department(self):
        """
        Gets the job_department of this JobsReportContent.

        :return: The job_department of this JobsReportContent.
        :rtype: str
        """
        return self._job_department

    @job_department.setter
    def job_department(self, job_department):
        """
        Sets the job_department of this JobsReportContent.

        :param job_department: The job_department of this JobsReportContent.
        :type: str
        """

        self._job_department = job_department

    @property
    def job_status(self):
        """
        Gets the job_status of this JobsReportContent.

        :return: The job_status of this JobsReportContent.
        :rtype: ValidJobStatus
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """
        Sets the job_status of this JobsReportContent.

        :param job_status: The job_status of this JobsReportContent.
        :type: ValidJobStatus
        """

        self._job_status = job_status

    @property
    def job_open_positions(self):
        """
        Gets the job_open_positions of this JobsReportContent.

        :return: The job_open_positions of this JobsReportContent.
        :rtype: int
        """
        return self._job_open_positions

    @job_open_positions.setter
    def job_open_positions(self, job_open_positions):
        """
        Sets the job_open_positions of this JobsReportContent.

        :param job_open_positions: The job_open_positions of this JobsReportContent.
        :type: int
        """

        self._job_open_positions = job_open_positions

    @property
    def candidates_rejected(self):
        """
        Gets the candidates_rejected of this JobsReportContent.

        :return: The candidates_rejected of this JobsReportContent.
        :rtype: int
        """
        return self._candidates_rejected

    @candidates_rejected.setter
    def candidates_rejected(self, candidates_rejected):
        """
        Sets the candidates_rejected of this JobsReportContent.

        :param candidates_rejected: The candidates_rejected of this JobsReportContent.
        :type: int
        """

        self._candidates_rejected = candidates_rejected

    @property
    def candidates_withdrawn(self):
        """
        Gets the candidates_withdrawn of this JobsReportContent.

        :return: The candidates_withdrawn of this JobsReportContent.
        :rtype: int
        """
        return self._candidates_withdrawn

    @candidates_withdrawn.setter
    def candidates_withdrawn(self, candidates_withdrawn):
        """
        Sets the candidates_withdrawn of this JobsReportContent.

        :param candidates_withdrawn: The candidates_withdrawn of this JobsReportContent.
        :type: int
        """

        self._candidates_withdrawn = candidates_withdrawn

    @property
    def candidates_in_review(self):
        """
        Gets the candidates_in_review of this JobsReportContent.

        :return: The candidates_in_review of this JobsReportContent.
        :rtype: int
        """
        return self._candidates_in_review

    @candidates_in_review.setter
    def candidates_in_review(self, candidates_in_review):
        """
        Sets the candidates_in_review of this JobsReportContent.

        :param candidates_in_review: The candidates_in_review of this JobsReportContent.
        :type: int
        """

        self._candidates_in_review = candidates_in_review

    @property
    def candidates_interview(self):
        """
        Gets the candidates_interview of this JobsReportContent.

        :return: The candidates_interview of this JobsReportContent.
        :rtype: int
        """
        return self._candidates_interview

    @candidates_interview.setter
    def candidates_interview(self, candidates_interview):
        """
        Sets the candidates_interview of this JobsReportContent.

        :param candidates_interview: The candidates_interview of this JobsReportContent.
        :type: int
        """

        self._candidates_interview = candidates_interview

    @property
    def candidates_offer(self):
        """
        Gets the candidates_offer of this JobsReportContent.

        :return: The candidates_offer of this JobsReportContent.
        :rtype: int
        """
        return self._candidates_offer

    @candidates_offer.setter
    def candidates_offer(self, candidates_offer):
        """
        Sets the candidates_offer of this JobsReportContent.

        :param candidates_offer: The candidates_offer of this JobsReportContent.
        :type: int
        """

        self._candidates_offer = candidates_offer

    @property
    def candidates_total(self):
        """
        Gets the candidates_total of this JobsReportContent.

        :return: The candidates_total of this JobsReportContent.
        :rtype: int
        """
        return self._candidates_total

    @candidates_total.setter
    def candidates_total(self, candidates_total):
        """
        Sets the candidates_total of this JobsReportContent.

        :param candidates_total: The candidates_total of this JobsReportContent.
        :type: int
        """

        self._candidates_total = candidates_total

    @property
    def candidates_hired(self):
        """
        Gets the candidates_hired of this JobsReportContent.

        :return: The candidates_hired of this JobsReportContent.
        :rtype: int
        """
        return self._candidates_hired

    @candidates_hired.setter
    def candidates_hired(self, candidates_hired):
        """
        Sets the candidates_hired of this JobsReportContent.

        :param candidates_hired: The candidates_hired of this JobsReportContent.
        :type: int
        """

        self._candidates_hired = candidates_hired

    @property
    def location_country(self):
        """
        Gets the location_country of this JobsReportContent.

        :return: The location_country of this JobsReportContent.
        :rtype: str
        """
        return self._location_country

    @location_country.setter
    def location_country(self, location_country):
        """
        Sets the location_country of this JobsReportContent.

        :param location_country: The location_country of this JobsReportContent.
        :type: str
        """

        self._location_country = location_country

    @property
    def location_state(self):
        """
        Gets the location_state of this JobsReportContent.

        :return: The location_state of this JobsReportContent.
        :rtype: str
        """
        return self._location_state

    @location_state.setter
    def location_state(self, location_state):
        """
        Sets the location_state of this JobsReportContent.

        :param location_state: The location_state of this JobsReportContent.
        :type: str
        """

        self._location_state = location_state

    @property
    def location_city(self):
        """
        Gets the location_city of this JobsReportContent.

        :return: The location_city of this JobsReportContent.
        :rtype: str
        """
        return self._location_city

    @location_city.setter
    def location_city(self, location_city):
        """
        Sets the location_city of this JobsReportContent.

        :param location_city: The location_city of this JobsReportContent.
        :type: str
        """

        self._location_city = location_city

    @property
    def location_latitude(self):
        """
        Gets the location_latitude of this JobsReportContent.

        :return: The location_latitude of this JobsReportContent.
        :rtype: float
        """
        return self._location_latitude

    @location_latitude.setter
    def location_latitude(self, location_latitude):
        """
        Sets the location_latitude of this JobsReportContent.

        :param location_latitude: The location_latitude of this JobsReportContent.
        :type: float
        """

        self._location_latitude = location_latitude

    @property
    def location_longitude(self):
        """
        Gets the location_longitude of this JobsReportContent.

        :return: The location_longitude of this JobsReportContent.
        :rtype: float
        """
        return self._location_longitude

    @location_longitude.setter
    def location_longitude(self, location_longitude):
        """
        Sets the location_longitude of this JobsReportContent.

        :param location_longitude: The location_longitude of this JobsReportContent.
        :type: float
        """

        self._location_longitude = location_longitude

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, JobsReportContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
