# coding: utf-8

"""
    Customer API - version 1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Posting(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, uuid=None, name=None, ref_number=None, company=None, release_date=None, location=None, industry=None, department=None, function=None, type_of_employment=None, experience_level=None, custom_field=None, ref=None, creator=None):
        """
        Posting - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'uuid': 'str',
            'name': 'str',
            'ref_number': 'str',
            'company': 'Company',
            'release_date': 'datetime',
            'location': 'PostingLocation',
            'industry': 'Industry',
            'department': 'Department',
            'function': 'Function',
            'type_of_employment': 'TypeOfEmployment',
            'experience_level': 'ExperienceLevel',
            'custom_field': 'list[CustomField]',
            'ref': 'str',
            'creator': 'Creator'
        }

        self.attribute_map = {
            'id': 'id',
            'uuid': 'uuid',
            'name': 'name',
            'ref_number': 'refNumber',
            'company': 'company',
            'release_date': 'releaseDate',
            'location': 'location',
            'industry': 'industry',
            'department': 'department',
            'function': 'function',
            'type_of_employment': 'typeOfEmployment',
            'experience_level': 'experienceLevel',
            'custom_field': 'customField',
            'ref': 'ref',
            'creator': 'creator'
        }

        self._id = id
        self._uuid = uuid
        self._name = name
        self._ref_number = ref_number
        self._company = company
        self._release_date = release_date
        self._location = location
        self._industry = industry
        self._department = department
        self._function = function
        self._type_of_employment = type_of_employment
        self._experience_level = experience_level
        self._custom_field = custom_field
        self._ref = ref
        self._creator = creator

    @property
    def id(self):
        """
        Gets the id of this Posting.

        :return: The id of this Posting.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Posting.

        :param id: The id of this Posting.
        :type: str
        """

        self._id = id

    @property
    def uuid(self):
        """
        Gets the uuid of this Posting.

        :return: The uuid of this Posting.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this Posting.

        :param uuid: The uuid of this Posting.
        :type: str
        """

        self._uuid = uuid

    @property
    def name(self):
        """
        Gets the name of this Posting.

        :return: The name of this Posting.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Posting.

        :param name: The name of this Posting.
        :type: str
        """

        self._name = name

    @property
    def ref_number(self):
        """
        Gets the ref_number of this Posting.

        :return: The ref_number of this Posting.
        :rtype: str
        """
        return self._ref_number

    @ref_number.setter
    def ref_number(self, ref_number):
        """
        Sets the ref_number of this Posting.

        :param ref_number: The ref_number of this Posting.
        :type: str
        """

        self._ref_number = ref_number

    @property
    def company(self):
        """
        Gets the company of this Posting.

        :return: The company of this Posting.
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """
        Sets the company of this Posting.

        :param company: The company of this Posting.
        :type: Company
        """

        self._company = company

    @property
    def release_date(self):
        """
        Gets the release_date of this Posting.

        :return: The release_date of this Posting.
        :rtype: datetime
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """
        Sets the release_date of this Posting.

        :param release_date: The release_date of this Posting.
        :type: datetime
        """

        self._release_date = release_date

    @property
    def location(self):
        """
        Gets the location of this Posting.

        :return: The location of this Posting.
        :rtype: PostingLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this Posting.

        :param location: The location of this Posting.
        :type: PostingLocation
        """

        self._location = location

    @property
    def industry(self):
        """
        Gets the industry of this Posting.

        :return: The industry of this Posting.
        :rtype: Industry
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """
        Sets the industry of this Posting.

        :param industry: The industry of this Posting.
        :type: Industry
        """

        self._industry = industry

    @property
    def department(self):
        """
        Gets the department of this Posting.

        :return: The department of this Posting.
        :rtype: Department
        """
        return self._department

    @department.setter
    def department(self, department):
        """
        Sets the department of this Posting.

        :param department: The department of this Posting.
        :type: Department
        """

        self._department = department

    @property
    def function(self):
        """
        Gets the function of this Posting.

        :return: The function of this Posting.
        :rtype: Function
        """
        return self._function

    @function.setter
    def function(self, function):
        """
        Sets the function of this Posting.

        :param function: The function of this Posting.
        :type: Function
        """

        self._function = function

    @property
    def type_of_employment(self):
        """
        Gets the type_of_employment of this Posting.

        :return: The type_of_employment of this Posting.
        :rtype: TypeOfEmployment
        """
        return self._type_of_employment

    @type_of_employment.setter
    def type_of_employment(self, type_of_employment):
        """
        Sets the type_of_employment of this Posting.

        :param type_of_employment: The type_of_employment of this Posting.
        :type: TypeOfEmployment
        """

        self._type_of_employment = type_of_employment

    @property
    def experience_level(self):
        """
        Gets the experience_level of this Posting.

        :return: The experience_level of this Posting.
        :rtype: ExperienceLevel
        """
        return self._experience_level

    @experience_level.setter
    def experience_level(self, experience_level):
        """
        Sets the experience_level of this Posting.

        :param experience_level: The experience_level of this Posting.
        :type: ExperienceLevel
        """

        self._experience_level = experience_level

    @property
    def custom_field(self):
        """
        Gets the custom_field of this Posting.

        :return: The custom_field of this Posting.
        :rtype: list[CustomField]
        """
        return self._custom_field

    @custom_field.setter
    def custom_field(self, custom_field):
        """
        Sets the custom_field of this Posting.

        :param custom_field: The custom_field of this Posting.
        :type: list[CustomField]
        """

        self._custom_field = custom_field

    @property
    def ref(self):
        """
        Gets the ref of this Posting.

        :return: The ref of this Posting.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """
        Sets the ref of this Posting.

        :param ref: The ref of this Posting.
        :type: str
        """

        self._ref = ref

    @property
    def creator(self):
        """
        Gets the creator of this Posting.

        :return: The creator of this Posting.
        :rtype: Creator
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """
        Sets the creator of this Posting.

        :param creator: The creator of this Posting.
        :type: Creator
        """

        self._creator = creator

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Posting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
