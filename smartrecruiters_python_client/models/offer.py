# coding: utf-8

"""
    Unofficial python library for the SmartRecruiters API

    The SmartRecruiters API provides a platform to integrate services or applications, build apps and create fully customizable career sites. It exposes SmartRecruiters functionality and allows to connect and build software enhancing it.

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Offer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, status=None, created_on=None, updated_on=None, properties=None, actions=None):
        """
        Offer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'status': 'str',
            'created_on': 'datetime',
            'updated_on': 'datetime',
            'properties': 'dict(str, str)',
            'actions': 'OfferActions'
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status',
            'created_on': 'createdOn',
            'updated_on': 'updatedOn',
            'properties': 'properties',
            'actions': 'actions'
        }

        self._id = id
        self._status = status
        self._created_on = created_on
        self._updated_on = updated_on
        self._properties = properties
        self._actions = actions

    @property
    def id(self):
        """
        Gets the id of this Offer.

        :return: The id of this Offer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Offer.

        :param id: The id of this Offer.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def status(self):
        """
        Gets the status of this Offer.

        :return: The status of this Offer.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Offer.

        :param status: The status of this Offer.
        :type: str
        """
        allowed_values = ["CREATED", "PENDING_APPROVAL", "APPROVED", "NOT_APPROVED", "PENDING_ACCEPTANCE", "ACCEPTED", "NOT_ACCEPTED", "ABANDONED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def created_on(self):
        """
        Gets the created_on of this Offer.

        :return: The created_on of this Offer.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this Offer.

        :param created_on: The created_on of this Offer.
        :type: datetime
        """
        if created_on is None:
            raise ValueError("Invalid value for `created_on`, must not be `None`")

        self._created_on = created_on

    @property
    def updated_on(self):
        """
        Gets the updated_on of this Offer.

        :return: The updated_on of this Offer.
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """
        Sets the updated_on of this Offer.

        :param updated_on: The updated_on of this Offer.
        :type: datetime
        """
        if updated_on is None:
            raise ValueError("Invalid value for `updated_on`, must not be `None`")

        self._updated_on = updated_on

    @property
    def properties(self):
        """
        Gets the properties of this Offer.

        :return: The properties of this Offer.
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this Offer.

        :param properties: The properties of this Offer.
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def actions(self):
        """
        Gets the actions of this Offer.

        :return: The actions of this Offer.
        :rtype: OfferActions
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """
        Sets the actions of this Offer.

        :param actions: The actions of this Offer.
        :type: OfferActions
        """

        self._actions = actions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Offer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
