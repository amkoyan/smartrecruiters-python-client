# coding: utf-8

"""
    Customer API - version 1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class JobSummary(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, title=None, ref_number=None, created_on=None, updated_on=None, last_activity_on=None, department=None, location=None, status=None, posting_status=None, language=None, actions=None):
        """
        JobSummary - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'title': 'str',
            'ref_number': 'str',
            'created_on': 'datetime',
            'updated_on': 'datetime',
            'last_activity_on': 'datetime',
            'department': 'Department',
            'location': 'Location',
            'status': 'JobStatus',
            'posting_status': 'PostingStatus',
            'language': 'Language',
            'actions': 'CandidatePrimaryAssignmentJobActions'
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'ref_number': 'refNumber',
            'created_on': 'createdOn',
            'updated_on': 'updatedOn',
            'last_activity_on': 'lastActivityOn',
            'department': 'department',
            'location': 'location',
            'status': 'status',
            'posting_status': 'postingStatus',
            'language': 'language',
            'actions': 'actions'
        }

        self._id = id
        self._title = title
        self._ref_number = ref_number
        self._created_on = created_on
        self._updated_on = updated_on
        self._last_activity_on = last_activity_on
        self._department = department
        self._location = location
        self._status = status
        self._posting_status = posting_status
        self._language = language
        self._actions = actions

    @property
    def id(self):
        """
        Gets the id of this JobSummary.

        :return: The id of this JobSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this JobSummary.

        :param id: The id of this JobSummary.
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """
        Gets the title of this JobSummary.

        :return: The title of this JobSummary.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this JobSummary.

        :param title: The title of this JobSummary.
        :type: str
        """

        self._title = title

    @property
    def ref_number(self):
        """
        Gets the ref_number of this JobSummary.

        :return: The ref_number of this JobSummary.
        :rtype: str
        """
        return self._ref_number

    @ref_number.setter
    def ref_number(self, ref_number):
        """
        Sets the ref_number of this JobSummary.

        :param ref_number: The ref_number of this JobSummary.
        :type: str
        """

        self._ref_number = ref_number

    @property
    def created_on(self):
        """
        Gets the created_on of this JobSummary.

        :return: The created_on of this JobSummary.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this JobSummary.

        :param created_on: The created_on of this JobSummary.
        :type: datetime
        """

        self._created_on = created_on

    @property
    def updated_on(self):
        """
        Gets the updated_on of this JobSummary.
        Job modification date

        :return: The updated_on of this JobSummary.
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """
        Sets the updated_on of this JobSummary.
        Job modification date

        :param updated_on: The updated_on of this JobSummary.
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def last_activity_on(self):
        """
        Gets the last_activity_on of this JobSummary.
        Indicates last activity associated with a job

        :return: The last_activity_on of this JobSummary.
        :rtype: datetime
        """
        return self._last_activity_on

    @last_activity_on.setter
    def last_activity_on(self, last_activity_on):
        """
        Sets the last_activity_on of this JobSummary.
        Indicates last activity associated with a job

        :param last_activity_on: The last_activity_on of this JobSummary.
        :type: datetime
        """

        self._last_activity_on = last_activity_on

    @property
    def department(self):
        """
        Gets the department of this JobSummary.

        :return: The department of this JobSummary.
        :rtype: Department
        """
        return self._department

    @department.setter
    def department(self, department):
        """
        Sets the department of this JobSummary.

        :param department: The department of this JobSummary.
        :type: Department
        """

        self._department = department

    @property
    def location(self):
        """
        Gets the location of this JobSummary.

        :return: The location of this JobSummary.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this JobSummary.

        :param location: The location of this JobSummary.
        :type: Location
        """

        self._location = location

    @property
    def status(self):
        """
        Gets the status of this JobSummary.

        :return: The status of this JobSummary.
        :rtype: JobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this JobSummary.

        :param status: The status of this JobSummary.
        :type: JobStatus
        """

        self._status = status

    @property
    def posting_status(self):
        """
        Gets the posting_status of this JobSummary.

        :return: The posting_status of this JobSummary.
        :rtype: PostingStatus
        """
        return self._posting_status

    @posting_status.setter
    def posting_status(self, posting_status):
        """
        Sets the posting_status of this JobSummary.

        :param posting_status: The posting_status of this JobSummary.
        :type: PostingStatus
        """

        self._posting_status = posting_status

    @property
    def language(self):
        """
        Gets the language of this JobSummary.

        :return: The language of this JobSummary.
        :rtype: Language
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this JobSummary.

        :param language: The language of this JobSummary.
        :type: Language
        """

        self._language = language

    @property
    def actions(self):
        """
        Gets the actions of this JobSummary.

        :return: The actions of this JobSummary.
        :rtype: CandidatePrimaryAssignmentJobActions
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """
        Sets the actions of this JobSummary.

        :param actions: The actions of this JobSummary.
        :type: CandidatePrimaryAssignmentJobActions
        """

        self._actions = actions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, JobSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
