# coding: utf-8

"""
    Customer API - version 1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InterviewsReportContent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, interview_id=None, application_id=None, application_stage=None, application_step=None, candidate_profile_id=None, candidate_status=None, job_id=None, interview_type=None, interview_location=None, interview_create_date=None, interview_update_date=None, interview_start_date=None, interview_time_zone=None, interview_duration=None, interview_canceled=None, creator_employee_id=None, creator_first_name=None, creator_last_name=None, interviewer_employee_id=None, interviewer_first_name=None, interviewer_last_name=None, interviewer_status=None, interviewer_review=None, interviewer_rating=None, start_time=None, end_time=None, duration=None, room=None, interviewers=None, time_to_provide_feedback=None):
        """
        InterviewsReportContent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'interview_id': 'str',
            'application_id': 'str',
            'application_stage': 'ApplicationStage',
            'application_step': 'str',
            'candidate_profile_id': 'str',
            'candidate_status': 'InterviewStatus',
            'job_id': 'str',
            'interview_type': 'str',
            'interview_location': 'str',
            'interview_create_date': 'str',
            'interview_update_date': 'str',
            'interview_start_date': 'str',
            'interview_time_zone': 'str',
            'interview_duration': 'float',
            'interview_canceled': 'bool',
            'creator_employee_id': 'str',
            'creator_first_name': 'str',
            'creator_last_name': 'str',
            'interviewer_employee_id': 'str',
            'interviewer_first_name': 'str',
            'interviewer_last_name': 'str',
            'interviewer_status': 'InterviewStatus',
            'interviewer_review': 'str',
            'interviewer_rating': 'float',
            'start_time': 'str',
            'end_time': 'str',
            'duration': 'float',
            'room': 'str',
            'interviewers': 'float',
            'time_to_provide_feedback': 'float'
        }

        self.attribute_map = {
            'interview_id': 'interviewId',
            'application_id': 'applicationId',
            'application_stage': 'applicationStage',
            'application_step': 'applicationStep',
            'candidate_profile_id': 'candidateProfileId',
            'candidate_status': 'candidateStatus',
            'job_id': 'jobId',
            'interview_type': 'interviewType',
            'interview_location': 'interviewLocation',
            'interview_create_date': 'interviewCreateDate',
            'interview_update_date': 'interviewUpdateDate',
            'interview_start_date': 'interviewStartDate',
            'interview_time_zone': 'interviewTimeZone',
            'interview_duration': 'interviewDuration',
            'interview_canceled': 'interviewCanceled',
            'creator_employee_id': 'creatorEmployeeId',
            'creator_first_name': 'creatorFirstName',
            'creator_last_name': 'creatorLastName',
            'interviewer_employee_id': 'interviewerEmployeeId',
            'interviewer_first_name': 'interviewerFirstName',
            'interviewer_last_name': 'interviewerLastName',
            'interviewer_status': 'interviewerStatus',
            'interviewer_review': 'interviewerReview',
            'interviewer_rating': 'interviewerRating',
            'start_time': 'startTime',
            'end_time': 'endTime',
            'duration': 'duration',
            'room': 'room',
            'interviewers': 'interviewers',
            'time_to_provide_feedback': 'timeToProvideFeedback'
        }

        self._interview_id = interview_id
        self._application_id = application_id
        self._application_stage = application_stage
        self._application_step = application_step
        self._candidate_profile_id = candidate_profile_id
        self._candidate_status = candidate_status
        self._job_id = job_id
        self._interview_type = interview_type
        self._interview_location = interview_location
        self._interview_create_date = interview_create_date
        self._interview_update_date = interview_update_date
        self._interview_start_date = interview_start_date
        self._interview_time_zone = interview_time_zone
        self._interview_duration = interview_duration
        self._interview_canceled = interview_canceled
        self._creator_employee_id = creator_employee_id
        self._creator_first_name = creator_first_name
        self._creator_last_name = creator_last_name
        self._interviewer_employee_id = interviewer_employee_id
        self._interviewer_first_name = interviewer_first_name
        self._interviewer_last_name = interviewer_last_name
        self._interviewer_status = interviewer_status
        self._interviewer_review = interviewer_review
        self._interviewer_rating = interviewer_rating
        self._start_time = start_time
        self._end_time = end_time
        self._duration = duration
        self._room = room
        self._interviewers = interviewers
        self._time_to_provide_feedback = time_to_provide_feedback

    @property
    def interview_id(self):
        """
        Gets the interview_id of this InterviewsReportContent.

        :return: The interview_id of this InterviewsReportContent.
        :rtype: str
        """
        return self._interview_id

    @interview_id.setter
    def interview_id(self, interview_id):
        """
        Sets the interview_id of this InterviewsReportContent.

        :param interview_id: The interview_id of this InterviewsReportContent.
        :type: str
        """

        self._interview_id = interview_id

    @property
    def application_id(self):
        """
        Gets the application_id of this InterviewsReportContent.

        :return: The application_id of this InterviewsReportContent.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """
        Sets the application_id of this InterviewsReportContent.

        :param application_id: The application_id of this InterviewsReportContent.
        :type: str
        """

        self._application_id = application_id

    @property
    def application_stage(self):
        """
        Gets the application_stage of this InterviewsReportContent.

        :return: The application_stage of this InterviewsReportContent.
        :rtype: ApplicationStage
        """
        return self._application_stage

    @application_stage.setter
    def application_stage(self, application_stage):
        """
        Sets the application_stage of this InterviewsReportContent.

        :param application_stage: The application_stage of this InterviewsReportContent.
        :type: ApplicationStage
        """

        self._application_stage = application_stage

    @property
    def application_step(self):
        """
        Gets the application_step of this InterviewsReportContent.

        :return: The application_step of this InterviewsReportContent.
        :rtype: str
        """
        return self._application_step

    @application_step.setter
    def application_step(self, application_step):
        """
        Sets the application_step of this InterviewsReportContent.

        :param application_step: The application_step of this InterviewsReportContent.
        :type: str
        """

        self._application_step = application_step

    @property
    def candidate_profile_id(self):
        """
        Gets the candidate_profile_id of this InterviewsReportContent.

        :return: The candidate_profile_id of this InterviewsReportContent.
        :rtype: str
        """
        return self._candidate_profile_id

    @candidate_profile_id.setter
    def candidate_profile_id(self, candidate_profile_id):
        """
        Sets the candidate_profile_id of this InterviewsReportContent.

        :param candidate_profile_id: The candidate_profile_id of this InterviewsReportContent.
        :type: str
        """

        self._candidate_profile_id = candidate_profile_id

    @property
    def candidate_status(self):
        """
        Gets the candidate_status of this InterviewsReportContent.

        :return: The candidate_status of this InterviewsReportContent.
        :rtype: InterviewStatus
        """
        return self._candidate_status

    @candidate_status.setter
    def candidate_status(self, candidate_status):
        """
        Sets the candidate_status of this InterviewsReportContent.

        :param candidate_status: The candidate_status of this InterviewsReportContent.
        :type: InterviewStatus
        """

        self._candidate_status = candidate_status

    @property
    def job_id(self):
        """
        Gets the job_id of this InterviewsReportContent.

        :return: The job_id of this InterviewsReportContent.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """
        Sets the job_id of this InterviewsReportContent.

        :param job_id: The job_id of this InterviewsReportContent.
        :type: str
        """

        self._job_id = job_id

    @property
    def interview_type(self):
        """
        Gets the interview_type of this InterviewsReportContent.

        :return: The interview_type of this InterviewsReportContent.
        :rtype: str
        """
        return self._interview_type

    @interview_type.setter
    def interview_type(self, interview_type):
        """
        Sets the interview_type of this InterviewsReportContent.

        :param interview_type: The interview_type of this InterviewsReportContent.
        :type: str
        """
        allowed_values = ["ONSITE", "PHONE", "VIDEO", "OTHER"]
        if interview_type not in allowed_values:
            raise ValueError(
                "Invalid value for `interview_type` ({0}), must be one of {1}"
                .format(interview_type, allowed_values)
            )

        self._interview_type = interview_type

    @property
    def interview_location(self):
        """
        Gets the interview_location of this InterviewsReportContent.

        :return: The interview_location of this InterviewsReportContent.
        :rtype: str
        """
        return self._interview_location

    @interview_location.setter
    def interview_location(self, interview_location):
        """
        Sets the interview_location of this InterviewsReportContent.

        :param interview_location: The interview_location of this InterviewsReportContent.
        :type: str
        """

        self._interview_location = interview_location

    @property
    def interview_create_date(self):
        """
        Gets the interview_create_date of this InterviewsReportContent.

        :return: The interview_create_date of this InterviewsReportContent.
        :rtype: str
        """
        return self._interview_create_date

    @interview_create_date.setter
    def interview_create_date(self, interview_create_date):
        """
        Sets the interview_create_date of this InterviewsReportContent.

        :param interview_create_date: The interview_create_date of this InterviewsReportContent.
        :type: str
        """

        self._interview_create_date = interview_create_date

    @property
    def interview_update_date(self):
        """
        Gets the interview_update_date of this InterviewsReportContent.

        :return: The interview_update_date of this InterviewsReportContent.
        :rtype: str
        """
        return self._interview_update_date

    @interview_update_date.setter
    def interview_update_date(self, interview_update_date):
        """
        Sets the interview_update_date of this InterviewsReportContent.

        :param interview_update_date: The interview_update_date of this InterviewsReportContent.
        :type: str
        """

        self._interview_update_date = interview_update_date

    @property
    def interview_start_date(self):
        """
        Gets the interview_start_date of this InterviewsReportContent.

        :return: The interview_start_date of this InterviewsReportContent.
        :rtype: str
        """
        return self._interview_start_date

    @interview_start_date.setter
    def interview_start_date(self, interview_start_date):
        """
        Sets the interview_start_date of this InterviewsReportContent.

        :param interview_start_date: The interview_start_date of this InterviewsReportContent.
        :type: str
        """

        self._interview_start_date = interview_start_date

    @property
    def interview_time_zone(self):
        """
        Gets the interview_time_zone of this InterviewsReportContent.

        :return: The interview_time_zone of this InterviewsReportContent.
        :rtype: str
        """
        return self._interview_time_zone

    @interview_time_zone.setter
    def interview_time_zone(self, interview_time_zone):
        """
        Sets the interview_time_zone of this InterviewsReportContent.

        :param interview_time_zone: The interview_time_zone of this InterviewsReportContent.
        :type: str
        """

        self._interview_time_zone = interview_time_zone

    @property
    def interview_duration(self):
        """
        Gets the interview_duration of this InterviewsReportContent.

        :return: The interview_duration of this InterviewsReportContent.
        :rtype: float
        """
        return self._interview_duration

    @interview_duration.setter
    def interview_duration(self, interview_duration):
        """
        Sets the interview_duration of this InterviewsReportContent.

        :param interview_duration: The interview_duration of this InterviewsReportContent.
        :type: float
        """

        self._interview_duration = interview_duration

    @property
    def interview_canceled(self):
        """
        Gets the interview_canceled of this InterviewsReportContent.

        :return: The interview_canceled of this InterviewsReportContent.
        :rtype: bool
        """
        return self._interview_canceled

    @interview_canceled.setter
    def interview_canceled(self, interview_canceled):
        """
        Sets the interview_canceled of this InterviewsReportContent.

        :param interview_canceled: The interview_canceled of this InterviewsReportContent.
        :type: bool
        """

        self._interview_canceled = interview_canceled

    @property
    def creator_employee_id(self):
        """
        Gets the creator_employee_id of this InterviewsReportContent.

        :return: The creator_employee_id of this InterviewsReportContent.
        :rtype: str
        """
        return self._creator_employee_id

    @creator_employee_id.setter
    def creator_employee_id(self, creator_employee_id):
        """
        Sets the creator_employee_id of this InterviewsReportContent.

        :param creator_employee_id: The creator_employee_id of this InterviewsReportContent.
        :type: str
        """

        self._creator_employee_id = creator_employee_id

    @property
    def creator_first_name(self):
        """
        Gets the creator_first_name of this InterviewsReportContent.

        :return: The creator_first_name of this InterviewsReportContent.
        :rtype: str
        """
        return self._creator_first_name

    @creator_first_name.setter
    def creator_first_name(self, creator_first_name):
        """
        Sets the creator_first_name of this InterviewsReportContent.

        :param creator_first_name: The creator_first_name of this InterviewsReportContent.
        :type: str
        """

        self._creator_first_name = creator_first_name

    @property
    def creator_last_name(self):
        """
        Gets the creator_last_name of this InterviewsReportContent.

        :return: The creator_last_name of this InterviewsReportContent.
        :rtype: str
        """
        return self._creator_last_name

    @creator_last_name.setter
    def creator_last_name(self, creator_last_name):
        """
        Sets the creator_last_name of this InterviewsReportContent.

        :param creator_last_name: The creator_last_name of this InterviewsReportContent.
        :type: str
        """

        self._creator_last_name = creator_last_name

    @property
    def interviewer_employee_id(self):
        """
        Gets the interviewer_employee_id of this InterviewsReportContent.

        :return: The interviewer_employee_id of this InterviewsReportContent.
        :rtype: str
        """
        return self._interviewer_employee_id

    @interviewer_employee_id.setter
    def interviewer_employee_id(self, interviewer_employee_id):
        """
        Sets the interviewer_employee_id of this InterviewsReportContent.

        :param interviewer_employee_id: The interviewer_employee_id of this InterviewsReportContent.
        :type: str
        """

        self._interviewer_employee_id = interviewer_employee_id

    @property
    def interviewer_first_name(self):
        """
        Gets the interviewer_first_name of this InterviewsReportContent.

        :return: The interviewer_first_name of this InterviewsReportContent.
        :rtype: str
        """
        return self._interviewer_first_name

    @interviewer_first_name.setter
    def interviewer_first_name(self, interviewer_first_name):
        """
        Sets the interviewer_first_name of this InterviewsReportContent.

        :param interviewer_first_name: The interviewer_first_name of this InterviewsReportContent.
        :type: str
        """

        self._interviewer_first_name = interviewer_first_name

    @property
    def interviewer_last_name(self):
        """
        Gets the interviewer_last_name of this InterviewsReportContent.

        :return: The interviewer_last_name of this InterviewsReportContent.
        :rtype: str
        """
        return self._interviewer_last_name

    @interviewer_last_name.setter
    def interviewer_last_name(self, interviewer_last_name):
        """
        Sets the interviewer_last_name of this InterviewsReportContent.

        :param interviewer_last_name: The interviewer_last_name of this InterviewsReportContent.
        :type: str
        """

        self._interviewer_last_name = interviewer_last_name

    @property
    def interviewer_status(self):
        """
        Gets the interviewer_status of this InterviewsReportContent.

        :return: The interviewer_status of this InterviewsReportContent.
        :rtype: InterviewStatus
        """
        return self._interviewer_status

    @interviewer_status.setter
    def interviewer_status(self, interviewer_status):
        """
        Sets the interviewer_status of this InterviewsReportContent.

        :param interviewer_status: The interviewer_status of this InterviewsReportContent.
        :type: InterviewStatus
        """

        self._interviewer_status = interviewer_status

    @property
    def interviewer_review(self):
        """
        Gets the interviewer_review of this InterviewsReportContent.

        :return: The interviewer_review of this InterviewsReportContent.
        :rtype: str
        """
        return self._interviewer_review

    @interviewer_review.setter
    def interviewer_review(self, interviewer_review):
        """
        Sets the interviewer_review of this InterviewsReportContent.

        :param interviewer_review: The interviewer_review of this InterviewsReportContent.
        :type: str
        """

        self._interviewer_review = interviewer_review

    @property
    def interviewer_rating(self):
        """
        Gets the interviewer_rating of this InterviewsReportContent.

        :return: The interviewer_rating of this InterviewsReportContent.
        :rtype: float
        """
        return self._interviewer_rating

    @interviewer_rating.setter
    def interviewer_rating(self, interviewer_rating):
        """
        Sets the interviewer_rating of this InterviewsReportContent.

        :param interviewer_rating: The interviewer_rating of this InterviewsReportContent.
        :type: float
        """

        self._interviewer_rating = interviewer_rating

    @property
    def start_time(self):
        """
        Gets the start_time of this InterviewsReportContent.

        :return: The start_time of this InterviewsReportContent.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this InterviewsReportContent.

        :param start_time: The start_time of this InterviewsReportContent.
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """
        Gets the end_time of this InterviewsReportContent.

        :return: The end_time of this InterviewsReportContent.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this InterviewsReportContent.

        :param end_time: The end_time of this InterviewsReportContent.
        :type: str
        """

        self._end_time = end_time

    @property
    def duration(self):
        """
        Gets the duration of this InterviewsReportContent.

        :return: The duration of this InterviewsReportContent.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this InterviewsReportContent.

        :param duration: The duration of this InterviewsReportContent.
        :type: float
        """

        self._duration = duration

    @property
    def room(self):
        """
        Gets the room of this InterviewsReportContent.

        :return: The room of this InterviewsReportContent.
        :rtype: str
        """
        return self._room

    @room.setter
    def room(self, room):
        """
        Sets the room of this InterviewsReportContent.

        :param room: The room of this InterviewsReportContent.
        :type: str
        """

        self._room = room

    @property
    def interviewers(self):
        """
        Gets the interviewers of this InterviewsReportContent.

        :return: The interviewers of this InterviewsReportContent.
        :rtype: float
        """
        return self._interviewers

    @interviewers.setter
    def interviewers(self, interviewers):
        """
        Sets the interviewers of this InterviewsReportContent.

        :param interviewers: The interviewers of this InterviewsReportContent.
        :type: float
        """

        self._interviewers = interviewers

    @property
    def time_to_provide_feedback(self):
        """
        Gets the time_to_provide_feedback of this InterviewsReportContent.

        :return: The time_to_provide_feedback of this InterviewsReportContent.
        :rtype: float
        """
        return self._time_to_provide_feedback

    @time_to_provide_feedback.setter
    def time_to_provide_feedback(self, time_to_provide_feedback):
        """
        Sets the time_to_provide_feedback of this InterviewsReportContent.

        :param time_to_provide_feedback: The time_to_provide_feedback of this InterviewsReportContent.
        :type: float
        """

        self._time_to_provide_feedback = time_to_provide_feedback

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InterviewsReportContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
