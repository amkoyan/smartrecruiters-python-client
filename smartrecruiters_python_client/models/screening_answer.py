# coding: utf-8

"""
    Unofficial python library for the SmartRecruiters API

    The SmartRecruiters API provides a platform to integrate services or applications, build apps and create fully customizable career sites. It exposes SmartRecruiters functionality and allows to connect and build software enhancing it.

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ScreeningAnswer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, type=None, category=None, name=None, label=None, records=None):
        """
        ScreeningAnswer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'type': 'str',
            'category': 'str',
            'name': 'str',
            'label': 'str',
            'records': 'list[AnswerRecord]'
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'category': 'category',
            'name': 'name',
            'label': 'label',
            'records': 'records'
        }

        self._id = id
        self._type = type
        self._category = category
        self._name = name
        self._label = label
        self._records = records

    @property
    def id(self):
        """
        Gets the id of this ScreeningAnswer.
        Id of Question to which answer was responded

        :return: The id of this ScreeningAnswer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ScreeningAnswer.
        Id of Question to which answer was responded

        :param id: The id of this ScreeningAnswer.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def type(self):
        """
        Gets the type of this ScreeningAnswer.

        :return: The type of this ScreeningAnswer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ScreeningAnswer.

        :param type: The type of this ScreeningAnswer.
        :type: str
        """
        allowed_values = ["text", "checkbox", "languages", "acknowledgement", "textarea", "select", "files", "info", "eeo", "radio", "salaryExpectation", "currency", "work_shifts"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def category(self):
        """
        Gets the category of this ScreeningAnswer.
        UUID for custom questions or fixed value for predefined questions:  - eeoInformation  - ofccpDisability  - ofccpVeteransForm  - veteranStatus  - disabilityStatus  - ofccpReasonableAccommodation  - ethnicity  - ethnicGroupsDescriptions  - todaysDate  - yourName  - preferredWorkShifts  - languages  - previousEmployment  - drivingRevoked  - drivingCurrent  - criminalRecord  - workPermit 

        :return: The category of this ScreeningAnswer.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this ScreeningAnswer.
        UUID for custom questions or fixed value for predefined questions:  - eeoInformation  - ofccpDisability  - ofccpVeteransForm  - veteranStatus  - disabilityStatus  - ofccpReasonableAccommodation  - ethnicity  - ethnicGroupsDescriptions  - todaysDate  - yourName  - preferredWorkShifts  - languages  - previousEmployment  - drivingRevoked  - drivingCurrent  - criminalRecord  - workPermit 

        :param category: The category of this ScreeningAnswer.
        :type: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def name(self):
        """
        Gets the name of this ScreeningAnswer.
        Question name visible to administrator on questions library list

        :return: The name of this ScreeningAnswer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ScreeningAnswer.
        Question name visible to administrator on questions library list

        :param name: The name of this ScreeningAnswer.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def label(self):
        """
        Gets the label of this ScreeningAnswer.
        Question text shown to candidate

        :return: The label of this ScreeningAnswer.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this ScreeningAnswer.
        Question text shown to candidate

        :param label: The label of this ScreeningAnswer.
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def records(self):
        """
        Gets the records of this ScreeningAnswer.
        Multiple records may be used for example for questions (Preferred Work Shifts, Languages)

        :return: The records of this ScreeningAnswer.
        :rtype: list[AnswerRecord]
        """
        return self._records

    @records.setter
    def records(self, records):
        """
        Sets the records of this ScreeningAnswer.
        Multiple records may be used for example for questions (Preferred Work Shifts, Languages)

        :param records: The records of this ScreeningAnswer.
        :type: list[AnswerRecord]
        """
        if records is None:
            raise ValueError("Invalid value for `records`, must not be `None`")

        self._records = records

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ScreeningAnswer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
