# coding: utf-8

"""
    Customer API - version 1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NewUser(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, email=None, first_name=None, last_name=None, role=None, external_data=None, language=None, sso_identifier=None, password=None, location=None):
        """
        NewUser - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'email': 'str',
            'first_name': 'str',
            'last_name': 'str',
            'role': 'str',
            'external_data': 'str',
            'language': 'UserLanguage',
            'sso_identifier': 'str',
            'password': 'str',
            'location': 'Location'
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'role': 'role',
            'external_data': 'externalData',
            'language': 'language',
            'sso_identifier': 'ssoIdentifier',
            'password': 'password',
            'location': 'location'
        }

        self._email = email
        self._first_name = first_name
        self._last_name = last_name
        self._role = role
        self._external_data = external_data
        self._language = language
        self._sso_identifier = sso_identifier
        self._password = password
        self._location = location

    @property
    def email(self):
        """
        Gets the email of this NewUser.

        :return: The email of this NewUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this NewUser.

        :param email: The email of this NewUser.
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this NewUser.

        :return: The first_name of this NewUser.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this NewUser.

        :param first_name: The first_name of this NewUser.
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")
        if first_name is not None and len(first_name) > 300:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `300`")
        if first_name is not None and len(first_name) < 1:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this NewUser.

        :return: The last_name of this NewUser.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this NewUser.

        :param last_name: The last_name of this NewUser.
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")
        if last_name is not None and len(last_name) > 300:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `300`")
        if last_name is not None and len(last_name) < 1:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")

        self._last_name = last_name

    @property
    def role(self):
        """
        Gets the role of this NewUser.

        :return: The role of this NewUser.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this NewUser.

        :param role: The role of this NewUser.
        :type: str
        """
        allowed_values = ["EMPLOYEE", "RESTRICTED", "STANDARD", "EXTENDED", "ADMINISTRATOR"]
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def external_data(self):
        """
        Gets the external_data of this NewUser.

        :return: The external_data of this NewUser.
        :rtype: str
        """
        return self._external_data

    @external_data.setter
    def external_data(self, external_data):
        """
        Sets the external_data of this NewUser.

        :param external_data: The external_data of this NewUser.
        :type: str
        """

        self._external_data = external_data

    @property
    def language(self):
        """
        Gets the language of this NewUser.

        :return: The language of this NewUser.
        :rtype: UserLanguage
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this NewUser.

        :param language: The language of this NewUser.
        :type: UserLanguage
        """

        self._language = language

    @property
    def sso_identifier(self):
        """
        Gets the sso_identifier of this NewUser.

        :return: The sso_identifier of this NewUser.
        :rtype: str
        """
        return self._sso_identifier

    @sso_identifier.setter
    def sso_identifier(self, sso_identifier):
        """
        Sets the sso_identifier of this NewUser.

        :param sso_identifier: The sso_identifier of this NewUser.
        :type: str
        """

        self._sso_identifier = sso_identifier

    @property
    def password(self):
        """
        Gets the password of this NewUser.

        :return: The password of this NewUser.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this NewUser.

        :param password: The password of this NewUser.
        :type: str
        """

        self._password = password

    @property
    def location(self):
        """
        Gets the location of this NewUser.

        :return: The location of this NewUser.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this NewUser.

        :param location: The location of this NewUser.
        :type: Location
        """

        self._location = location

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NewUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
