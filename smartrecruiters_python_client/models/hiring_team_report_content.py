# coding: utf-8

"""
    Customer API - version 1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class HiringTeamReportContent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, employee_id=None, employee_first_name=None, employee_last_name=None, job_id=None, job_title=None, role=None):
        """
        HiringTeamReportContent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'employee_id': 'str',
            'employee_first_name': 'str',
            'employee_last_name': 'str',
            'job_id': 'str',
            'job_title': 'str',
            'role': 'str'
        }

        self.attribute_map = {
            'employee_id': 'employeeId',
            'employee_first_name': 'employeeFirstName',
            'employee_last_name': 'employeeLastName',
            'job_id': 'jobId',
            'job_title': 'jobTitle',
            'role': 'role'
        }

        self._employee_id = employee_id
        self._employee_first_name = employee_first_name
        self._employee_last_name = employee_last_name
        self._job_id = job_id
        self._job_title = job_title
        self._role = role

    @property
    def employee_id(self):
        """
        Gets the employee_id of this HiringTeamReportContent.

        :return: The employee_id of this HiringTeamReportContent.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """
        Sets the employee_id of this HiringTeamReportContent.

        :param employee_id: The employee_id of this HiringTeamReportContent.
        :type: str
        """

        self._employee_id = employee_id

    @property
    def employee_first_name(self):
        """
        Gets the employee_first_name of this HiringTeamReportContent.

        :return: The employee_first_name of this HiringTeamReportContent.
        :rtype: str
        """
        return self._employee_first_name

    @employee_first_name.setter
    def employee_first_name(self, employee_first_name):
        """
        Sets the employee_first_name of this HiringTeamReportContent.

        :param employee_first_name: The employee_first_name of this HiringTeamReportContent.
        :type: str
        """

        self._employee_first_name = employee_first_name

    @property
    def employee_last_name(self):
        """
        Gets the employee_last_name of this HiringTeamReportContent.

        :return: The employee_last_name of this HiringTeamReportContent.
        :rtype: str
        """
        return self._employee_last_name

    @employee_last_name.setter
    def employee_last_name(self, employee_last_name):
        """
        Sets the employee_last_name of this HiringTeamReportContent.

        :param employee_last_name: The employee_last_name of this HiringTeamReportContent.
        :type: str
        """

        self._employee_last_name = employee_last_name

    @property
    def job_id(self):
        """
        Gets the job_id of this HiringTeamReportContent.

        :return: The job_id of this HiringTeamReportContent.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """
        Sets the job_id of this HiringTeamReportContent.

        :param job_id: The job_id of this HiringTeamReportContent.
        :type: str
        """

        self._job_id = job_id

    @property
    def job_title(self):
        """
        Gets the job_title of this HiringTeamReportContent.

        :return: The job_title of this HiringTeamReportContent.
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """
        Sets the job_title of this HiringTeamReportContent.

        :param job_title: The job_title of this HiringTeamReportContent.
        :type: str
        """

        self._job_title = job_title

    @property
    def role(self):
        """
        Gets the role of this HiringTeamReportContent.

        :return: The role of this HiringTeamReportContent.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this HiringTeamReportContent.

        :param role: The role of this HiringTeamReportContent.
        :type: str
        """

        self._role = role

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HiringTeamReportContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
