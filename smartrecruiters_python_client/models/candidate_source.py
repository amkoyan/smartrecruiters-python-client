# coding: utf-8

"""
    Customer API - version 1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CandidateSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, source_type_id=None, source_sub_type_id=None, source_id=None):
        """
        CandidateSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'source_type_id': 'str',
            'source_sub_type_id': 'str',
            'source_id': 'str'
        }

        self.attribute_map = {
            'source_type_id': 'sourceTypeId',
            'source_sub_type_id': 'sourceSubTypeId',
            'source_id': 'sourceId'
        }

        self._source_type_id = source_type_id
        self._source_sub_type_id = source_sub_type_id
        self._source_id = source_id

    @property
    def source_type_id(self):
        """
        Gets the source_type_id of this CandidateSource.

        :return: The source_type_id of this CandidateSource.
        :rtype: str
        """
        return self._source_type_id

    @source_type_id.setter
    def source_type_id(self, source_type_id):
        """
        Sets the source_type_id of this CandidateSource.

        :param source_type_id: The source_type_id of this CandidateSource.
        :type: str
        """
        if source_type_id is None:
            raise ValueError("Invalid value for `source_type_id`, must not be `None`")
        if source_type_id is not None and len(source_type_id) < 1:
            raise ValueError("Invalid value for `source_type_id`, length must be greater than or equal to `1`")

        self._source_type_id = source_type_id

    @property
    def source_sub_type_id(self):
        """
        Gets the source_sub_type_id of this CandidateSource.

        :return: The source_sub_type_id of this CandidateSource.
        :rtype: str
        """
        return self._source_sub_type_id

    @source_sub_type_id.setter
    def source_sub_type_id(self, source_sub_type_id):
        """
        Sets the source_sub_type_id of this CandidateSource.

        :param source_sub_type_id: The source_sub_type_id of this CandidateSource.
        :type: str
        """

        self._source_sub_type_id = source_sub_type_id

    @property
    def source_id(self):
        """
        Gets the source_id of this CandidateSource.

        :return: The source_id of this CandidateSource.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """
        Sets the source_id of this CandidateSource.

        :param source_id: The source_id of this CandidateSource.
        :type: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")
        if source_id is not None and len(source_id) < 1:
            raise ValueError("Invalid value for `source_id`, length must be greater than or equal to `1`")

        self._source_id = source_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CandidateSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
