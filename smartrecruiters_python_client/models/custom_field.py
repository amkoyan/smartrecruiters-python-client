# coding: utf-8

"""
    Unofficial python library for the SmartRecruiters API

    The SmartRecruiters API provides a platform to integrate services or applications, build apps and create fully customizable career sites. It exposes SmartRecruiters functionality and allows to connect and build software enhancing it.

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CustomField(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, field_id=None, field_label=None, value_id=None, value_label=None):
        """
        CustomField - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'field_id': 'str',
            'field_label': 'str',
            'value_id': 'str',
            'value_label': 'str'
        }

        self.attribute_map = {
            'field_id': 'fieldId',
            'field_label': 'fieldLabel',
            'value_id': 'valueId',
            'value_label': 'valueLabel'
        }

        self._field_id = field_id
        self._field_label = field_label
        self._value_id = value_id
        self._value_label = value_label

    @property
    def field_id(self):
        """
        Gets the field_id of this CustomField.

        :return: The field_id of this CustomField.
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """
        Sets the field_id of this CustomField.

        :param field_id: The field_id of this CustomField.
        :type: str
        """

        self._field_id = field_id

    @property
    def field_label(self):
        """
        Gets the field_label of this CustomField.

        :return: The field_label of this CustomField.
        :rtype: str
        """
        return self._field_label

    @field_label.setter
    def field_label(self, field_label):
        """
        Sets the field_label of this CustomField.

        :param field_label: The field_label of this CustomField.
        :type: str
        """

        self._field_label = field_label

    @property
    def value_id(self):
        """
        Gets the value_id of this CustomField.

        :return: The value_id of this CustomField.
        :rtype: str
        """
        return self._value_id

    @value_id.setter
    def value_id(self, value_id):
        """
        Sets the value_id of this CustomField.

        :param value_id: The value_id of this CustomField.
        :type: str
        """

        self._value_id = value_id

    @property
    def value_label(self):
        """
        Gets the value_label of this CustomField.

        :return: The value_label of this CustomField.
        :rtype: str
        """
        return self._value_label

    @value_label.setter
    def value_label(self, value_label):
        """
        Sets the value_label of this CustomField.

        :param value_label: The value_label of this CustomField.
        :type: str
        """

        self._value_label = value_label

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
