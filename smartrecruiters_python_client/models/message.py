# coding: utf-8

"""
    Unofficial python library for the SmartRecruiters API

    The SmartRecruiters API provides a platform to integrate services or applications, build apps and create fully customizable career sites. It exposes SmartRecruiters functionality and allows to connect and build software enhancing it.

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Message(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, content=None, correlation_id=None, share_with=None):
        """
        Message - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'content': 'str',
            'correlation_id': 'str',
            'share_with': 'ShareWith'
        }

        self.attribute_map = {
            'content': 'content',
            'correlation_id': 'correlationId',
            'share_with': 'shareWith'
        }

        self._content = content
        self._correlation_id = correlation_id
        self._share_with = share_with

    @property
    def content(self):
        """
        Gets the content of this Message.
        Content of the message

        :return: The content of this Message.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this Message.
        Content of the message

        :param content: The content of this Message.
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")
        if content is not None and len(content) > 10000:
            raise ValueError("Invalid value for `content`, length must be less than or equal to `10000`")
        if content is not None and len(content) < 1:
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `1`")

        self._content = content

    @property
    def correlation_id(self):
        """
        Gets the correlation_id of this Message.

        :return: The correlation_id of this Message.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """
        Sets the correlation_id of this Message.

        :param correlation_id: The correlation_id of this Message.
        :type: str
        """

        self._correlation_id = correlation_id

    @property
    def share_with(self):
        """
        Gets the share_with of this Message.

        :return: The share_with of this Message.
        :rtype: ShareWith
        """
        return self._share_with

    @share_with.setter
    def share_with(self, share_with):
        """
        Sets the share_with of this Message.

        :param share_with: The share_with of this Message.
        :type: ShareWith
        """

        self._share_with = share_with

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Message):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
