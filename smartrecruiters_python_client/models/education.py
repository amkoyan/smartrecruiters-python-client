# coding: utf-8

"""
    Customer API - version 1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Education(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, institution=None, degree=None, major=None, current=None, location=None, start_date=None, end_date=None, description=None):
        """
        Education - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'institution': 'str',
            'degree': 'str',
            'major': 'str',
            'current': 'bool',
            'location': 'str',
            'start_date': 'When',
            'end_date': 'When',
            'description': 'str'
        }

        self.attribute_map = {
            'institution': 'institution',
            'degree': 'degree',
            'major': 'major',
            'current': 'current',
            'location': 'location',
            'start_date': 'startDate',
            'end_date': 'endDate',
            'description': 'description'
        }

        self._institution = institution
        self._degree = degree
        self._major = major
        self._current = current
        self._location = location
        self._start_date = start_date
        self._end_date = end_date
        self._description = description

    @property
    def institution(self):
        """
        Gets the institution of this Education.

        :return: The institution of this Education.
        :rtype: str
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """
        Sets the institution of this Education.

        :param institution: The institution of this Education.
        :type: str
        """
        if institution is not None and len(institution) < 1:
            raise ValueError("Invalid value for `institution`, length must be greater than or equal to `1`")

        self._institution = institution

    @property
    def degree(self):
        """
        Gets the degree of this Education.

        :return: The degree of this Education.
        :rtype: str
        """
        return self._degree

    @degree.setter
    def degree(self, degree):
        """
        Sets the degree of this Education.

        :param degree: The degree of this Education.
        :type: str
        """
        if degree is not None and len(degree) < 1:
            raise ValueError("Invalid value for `degree`, length must be greater than or equal to `1`")

        self._degree = degree

    @property
    def major(self):
        """
        Gets the major of this Education.

        :return: The major of this Education.
        :rtype: str
        """
        return self._major

    @major.setter
    def major(self, major):
        """
        Sets the major of this Education.

        :param major: The major of this Education.
        :type: str
        """
        if major is not None and len(major) < 1:
            raise ValueError("Invalid value for `major`, length must be greater than or equal to `1`")

        self._major = major

    @property
    def current(self):
        """
        Gets the current of this Education.

        :return: The current of this Education.
        :rtype: bool
        """
        return self._current

    @current.setter
    def current(self, current):
        """
        Sets the current of this Education.

        :param current: The current of this Education.
        :type: bool
        """

        self._current = current

    @property
    def location(self):
        """
        Gets the location of this Education.

        :return: The location of this Education.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this Education.

        :param location: The location of this Education.
        :type: str
        """

        self._location = location

    @property
    def start_date(self):
        """
        Gets the start_date of this Education.

        :return: The start_date of this Education.
        :rtype: When
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this Education.

        :param start_date: The start_date of this Education.
        :type: When
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """
        Gets the end_date of this Education.

        :return: The end_date of this Education.
        :rtype: When
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """
        Sets the end_date of this Education.

        :param end_date: The end_date of this Education.
        :type: When
        """

        self._end_date = end_date

    @property
    def description(self):
        """
        Gets the description of this Education.

        :return: The description of this Education.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Education.

        :param description: The description of this Education.
        :type: str
        """

        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Education):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
