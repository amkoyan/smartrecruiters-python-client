# coding: utf-8

"""
    Unofficial python library for the SmartRecruiters API

    The SmartRecruiters API provides a platform to integrate services or applications, build apps and create fully customizable career sites. It exposes SmartRecruiters functionality and allows to connect and build software enhancing it.

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApplicationsReportContent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, application_id=None, application_create_date=None, application_last_update=None, application_stage=None, application_step=None, application_reason_of_rejection=None, application_reason_of_withdrawal=None, application_rejected_after=None, application_withdrawn_after=None, job_id=None, job_title=None, source=None, source_type=None, candidate_profile_id=None, candidate_first_name=None, candidate_last_name=None, candidate_email=None, candidate_phone=None, candidate_location=None, candidate_location_latitude=None, candidate_location_longitude=None, candidate_internal=None, candidate_gender=None, candidate_ethnicity=None, applied_via=None, position_id=None):
        """
        ApplicationsReportContent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'application_id': 'str',
            'application_create_date': 'str',
            'application_last_update': 'str',
            'application_stage': 'ApplicationStage',
            'application_step': 'str',
            'application_reason_of_rejection': 'str',
            'application_reason_of_withdrawal': 'str',
            'application_rejected_after': 'ApplicationStage',
            'application_withdrawn_after': 'ApplicationStage',
            'job_id': 'str',
            'job_title': 'str',
            'source': 'str',
            'source_type': 'str',
            'candidate_profile_id': 'str',
            'candidate_first_name': 'str',
            'candidate_last_name': 'str',
            'candidate_email': 'str',
            'candidate_phone': 'str',
            'candidate_location': 'str',
            'candidate_location_latitude': 'float',
            'candidate_location_longitude': 'float',
            'candidate_internal': 'bool',
            'candidate_gender': 'str',
            'candidate_ethnicity': 'str',
            'applied_via': 'str',
            'position_id': 'str'
        }

        self.attribute_map = {
            'application_id': 'applicationId',
            'application_create_date': 'applicationCreateDate',
            'application_last_update': 'applicationLastUpdate',
            'application_stage': 'applicationStage',
            'application_step': 'applicationStep',
            'application_reason_of_rejection': 'applicationReasonOfRejection',
            'application_reason_of_withdrawal': 'applicationReasonOfWithdrawal',
            'application_rejected_after': 'applicationRejectedAfter',
            'application_withdrawn_after': 'applicationWithdrawnAfter',
            'job_id': 'jobId',
            'job_title': 'jobTitle',
            'source': 'source',
            'source_type': 'sourceType',
            'candidate_profile_id': 'candidateProfileId',
            'candidate_first_name': 'candidateFirstName',
            'candidate_last_name': 'candidateLastName',
            'candidate_email': 'candidateEmail',
            'candidate_phone': 'candidatePhone',
            'candidate_location': 'candidateLocation',
            'candidate_location_latitude': 'candidateLocationLatitude',
            'candidate_location_longitude': 'candidateLocationLongitude',
            'candidate_internal': 'candidateInternal',
            'candidate_gender': 'candidateGender',
            'candidate_ethnicity': 'candidateEthnicity',
            'applied_via': 'appliedVia',
            'position_id': 'positionId'
        }

        self._application_id = application_id
        self._application_create_date = application_create_date
        self._application_last_update = application_last_update
        self._application_stage = application_stage
        self._application_step = application_step
        self._application_reason_of_rejection = application_reason_of_rejection
        self._application_reason_of_withdrawal = application_reason_of_withdrawal
        self._application_rejected_after = application_rejected_after
        self._application_withdrawn_after = application_withdrawn_after
        self._job_id = job_id
        self._job_title = job_title
        self._source = source
        self._source_type = source_type
        self._candidate_profile_id = candidate_profile_id
        self._candidate_first_name = candidate_first_name
        self._candidate_last_name = candidate_last_name
        self._candidate_email = candidate_email
        self._candidate_phone = candidate_phone
        self._candidate_location = candidate_location
        self._candidate_location_latitude = candidate_location_latitude
        self._candidate_location_longitude = candidate_location_longitude
        self._candidate_internal = candidate_internal
        self._candidate_gender = candidate_gender
        self._candidate_ethnicity = candidate_ethnicity
        self._applied_via = applied_via
        self._position_id = position_id

    @property
    def application_id(self):
        """
        Gets the application_id of this ApplicationsReportContent.

        :return: The application_id of this ApplicationsReportContent.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """
        Sets the application_id of this ApplicationsReportContent.

        :param application_id: The application_id of this ApplicationsReportContent.
        :type: str
        """

        self._application_id = application_id

    @property
    def application_create_date(self):
        """
        Gets the application_create_date of this ApplicationsReportContent.

        :return: The application_create_date of this ApplicationsReportContent.
        :rtype: str
        """
        return self._application_create_date

    @application_create_date.setter
    def application_create_date(self, application_create_date):
        """
        Sets the application_create_date of this ApplicationsReportContent.

        :param application_create_date: The application_create_date of this ApplicationsReportContent.
        :type: str
        """

        self._application_create_date = application_create_date

    @property
    def application_last_update(self):
        """
        Gets the application_last_update of this ApplicationsReportContent.

        :return: The application_last_update of this ApplicationsReportContent.
        :rtype: str
        """
        return self._application_last_update

    @application_last_update.setter
    def application_last_update(self, application_last_update):
        """
        Sets the application_last_update of this ApplicationsReportContent.

        :param application_last_update: The application_last_update of this ApplicationsReportContent.
        :type: str
        """

        self._application_last_update = application_last_update

    @property
    def application_stage(self):
        """
        Gets the application_stage of this ApplicationsReportContent.

        :return: The application_stage of this ApplicationsReportContent.
        :rtype: ApplicationStage
        """
        return self._application_stage

    @application_stage.setter
    def application_stage(self, application_stage):
        """
        Sets the application_stage of this ApplicationsReportContent.

        :param application_stage: The application_stage of this ApplicationsReportContent.
        :type: ApplicationStage
        """

        self._application_stage = application_stage

    @property
    def application_step(self):
        """
        Gets the application_step of this ApplicationsReportContent.

        :return: The application_step of this ApplicationsReportContent.
        :rtype: str
        """
        return self._application_step

    @application_step.setter
    def application_step(self, application_step):
        """
        Sets the application_step of this ApplicationsReportContent.

        :param application_step: The application_step of this ApplicationsReportContent.
        :type: str
        """

        self._application_step = application_step

    @property
    def application_reason_of_rejection(self):
        """
        Gets the application_reason_of_rejection of this ApplicationsReportContent.

        :return: The application_reason_of_rejection of this ApplicationsReportContent.
        :rtype: str
        """
        return self._application_reason_of_rejection

    @application_reason_of_rejection.setter
    def application_reason_of_rejection(self, application_reason_of_rejection):
        """
        Sets the application_reason_of_rejection of this ApplicationsReportContent.

        :param application_reason_of_rejection: The application_reason_of_rejection of this ApplicationsReportContent.
        :type: str
        """

        self._application_reason_of_rejection = application_reason_of_rejection

    @property
    def application_reason_of_withdrawal(self):
        """
        Gets the application_reason_of_withdrawal of this ApplicationsReportContent.

        :return: The application_reason_of_withdrawal of this ApplicationsReportContent.
        :rtype: str
        """
        return self._application_reason_of_withdrawal

    @application_reason_of_withdrawal.setter
    def application_reason_of_withdrawal(self, application_reason_of_withdrawal):
        """
        Sets the application_reason_of_withdrawal of this ApplicationsReportContent.

        :param application_reason_of_withdrawal: The application_reason_of_withdrawal of this ApplicationsReportContent.
        :type: str
        """

        self._application_reason_of_withdrawal = application_reason_of_withdrawal

    @property
    def application_rejected_after(self):
        """
        Gets the application_rejected_after of this ApplicationsReportContent.

        :return: The application_rejected_after of this ApplicationsReportContent.
        :rtype: ApplicationStage
        """
        return self._application_rejected_after

    @application_rejected_after.setter
    def application_rejected_after(self, application_rejected_after):
        """
        Sets the application_rejected_after of this ApplicationsReportContent.

        :param application_rejected_after: The application_rejected_after of this ApplicationsReportContent.
        :type: ApplicationStage
        """

        self._application_rejected_after = application_rejected_after

    @property
    def application_withdrawn_after(self):
        """
        Gets the application_withdrawn_after of this ApplicationsReportContent.

        :return: The application_withdrawn_after of this ApplicationsReportContent.
        :rtype: ApplicationStage
        """
        return self._application_withdrawn_after

    @application_withdrawn_after.setter
    def application_withdrawn_after(self, application_withdrawn_after):
        """
        Sets the application_withdrawn_after of this ApplicationsReportContent.

        :param application_withdrawn_after: The application_withdrawn_after of this ApplicationsReportContent.
        :type: ApplicationStage
        """

        self._application_withdrawn_after = application_withdrawn_after

    @property
    def job_id(self):
        """
        Gets the job_id of this ApplicationsReportContent.

        :return: The job_id of this ApplicationsReportContent.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """
        Sets the job_id of this ApplicationsReportContent.

        :param job_id: The job_id of this ApplicationsReportContent.
        :type: str
        """

        self._job_id = job_id

    @property
    def job_title(self):
        """
        Gets the job_title of this ApplicationsReportContent.

        :return: The job_title of this ApplicationsReportContent.
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """
        Sets the job_title of this ApplicationsReportContent.

        :param job_title: The job_title of this ApplicationsReportContent.
        :type: str
        """

        self._job_title = job_title

    @property
    def source(self):
        """
        Gets the source of this ApplicationsReportContent.

        :return: The source of this ApplicationsReportContent.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this ApplicationsReportContent.

        :param source: The source of this ApplicationsReportContent.
        :type: str
        """

        self._source = source

    @property
    def source_type(self):
        """
        Gets the source_type of this ApplicationsReportContent.

        :return: The source_type of this ApplicationsReportContent.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """
        Sets the source_type of this ApplicationsReportContent.

        :param source_type: The source_type of this ApplicationsReportContent.
        :type: str
        """

        self._source_type = source_type

    @property
    def candidate_profile_id(self):
        """
        Gets the candidate_profile_id of this ApplicationsReportContent.

        :return: The candidate_profile_id of this ApplicationsReportContent.
        :rtype: str
        """
        return self._candidate_profile_id

    @candidate_profile_id.setter
    def candidate_profile_id(self, candidate_profile_id):
        """
        Sets the candidate_profile_id of this ApplicationsReportContent.

        :param candidate_profile_id: The candidate_profile_id of this ApplicationsReportContent.
        :type: str
        """

        self._candidate_profile_id = candidate_profile_id

    @property
    def candidate_first_name(self):
        """
        Gets the candidate_first_name of this ApplicationsReportContent.

        :return: The candidate_first_name of this ApplicationsReportContent.
        :rtype: str
        """
        return self._candidate_first_name

    @candidate_first_name.setter
    def candidate_first_name(self, candidate_first_name):
        """
        Sets the candidate_first_name of this ApplicationsReportContent.

        :param candidate_first_name: The candidate_first_name of this ApplicationsReportContent.
        :type: str
        """

        self._candidate_first_name = candidate_first_name

    @property
    def candidate_last_name(self):
        """
        Gets the candidate_last_name of this ApplicationsReportContent.

        :return: The candidate_last_name of this ApplicationsReportContent.
        :rtype: str
        """
        return self._candidate_last_name

    @candidate_last_name.setter
    def candidate_last_name(self, candidate_last_name):
        """
        Sets the candidate_last_name of this ApplicationsReportContent.

        :param candidate_last_name: The candidate_last_name of this ApplicationsReportContent.
        :type: str
        """

        self._candidate_last_name = candidate_last_name

    @property
    def candidate_email(self):
        """
        Gets the candidate_email of this ApplicationsReportContent.

        :return: The candidate_email of this ApplicationsReportContent.
        :rtype: str
        """
        return self._candidate_email

    @candidate_email.setter
    def candidate_email(self, candidate_email):
        """
        Sets the candidate_email of this ApplicationsReportContent.

        :param candidate_email: The candidate_email of this ApplicationsReportContent.
        :type: str
        """

        self._candidate_email = candidate_email

    @property
    def candidate_phone(self):
        """
        Gets the candidate_phone of this ApplicationsReportContent.

        :return: The candidate_phone of this ApplicationsReportContent.
        :rtype: str
        """
        return self._candidate_phone

    @candidate_phone.setter
    def candidate_phone(self, candidate_phone):
        """
        Sets the candidate_phone of this ApplicationsReportContent.

        :param candidate_phone: The candidate_phone of this ApplicationsReportContent.
        :type: str
        """

        self._candidate_phone = candidate_phone

    @property
    def candidate_location(self):
        """
        Gets the candidate_location of this ApplicationsReportContent.

        :return: The candidate_location of this ApplicationsReportContent.
        :rtype: str
        """
        return self._candidate_location

    @candidate_location.setter
    def candidate_location(self, candidate_location):
        """
        Sets the candidate_location of this ApplicationsReportContent.

        :param candidate_location: The candidate_location of this ApplicationsReportContent.
        :type: str
        """

        self._candidate_location = candidate_location

    @property
    def candidate_location_latitude(self):
        """
        Gets the candidate_location_latitude of this ApplicationsReportContent.

        :return: The candidate_location_latitude of this ApplicationsReportContent.
        :rtype: float
        """
        return self._candidate_location_latitude

    @candidate_location_latitude.setter
    def candidate_location_latitude(self, candidate_location_latitude):
        """
        Sets the candidate_location_latitude of this ApplicationsReportContent.

        :param candidate_location_latitude: The candidate_location_latitude of this ApplicationsReportContent.
        :type: float
        """

        self._candidate_location_latitude = candidate_location_latitude

    @property
    def candidate_location_longitude(self):
        """
        Gets the candidate_location_longitude of this ApplicationsReportContent.

        :return: The candidate_location_longitude of this ApplicationsReportContent.
        :rtype: float
        """
        return self._candidate_location_longitude

    @candidate_location_longitude.setter
    def candidate_location_longitude(self, candidate_location_longitude):
        """
        Sets the candidate_location_longitude of this ApplicationsReportContent.

        :param candidate_location_longitude: The candidate_location_longitude of this ApplicationsReportContent.
        :type: float
        """

        self._candidate_location_longitude = candidate_location_longitude

    @property
    def candidate_internal(self):
        """
        Gets the candidate_internal of this ApplicationsReportContent.

        :return: The candidate_internal of this ApplicationsReportContent.
        :rtype: bool
        """
        return self._candidate_internal

    @candidate_internal.setter
    def candidate_internal(self, candidate_internal):
        """
        Sets the candidate_internal of this ApplicationsReportContent.

        :param candidate_internal: The candidate_internal of this ApplicationsReportContent.
        :type: bool
        """

        self._candidate_internal = candidate_internal

    @property
    def candidate_gender(self):
        """
        Gets the candidate_gender of this ApplicationsReportContent.

        :return: The candidate_gender of this ApplicationsReportContent.
        :rtype: str
        """
        return self._candidate_gender

    @candidate_gender.setter
    def candidate_gender(self, candidate_gender):
        """
        Sets the candidate_gender of this ApplicationsReportContent.

        :param candidate_gender: The candidate_gender of this ApplicationsReportContent.
        :type: str
        """
        allowed_values = ["MALE", "FEMALE", "DECLINE"]
        if candidate_gender not in allowed_values:
            raise ValueError(
                "Invalid value for `candidate_gender` ({0}), must be one of {1}"
                .format(candidate_gender, allowed_values)
            )

        self._candidate_gender = candidate_gender

    @property
    def candidate_ethnicity(self):
        """
        Gets the candidate_ethnicity of this ApplicationsReportContent.

        :return: The candidate_ethnicity of this ApplicationsReportContent.
        :rtype: str
        """
        return self._candidate_ethnicity

    @candidate_ethnicity.setter
    def candidate_ethnicity(self, candidate_ethnicity):
        """
        Sets the candidate_ethnicity of this ApplicationsReportContent.

        :param candidate_ethnicity: The candidate_ethnicity of this ApplicationsReportContent.
        :type: str
        """
        allowed_values = ["BLACK", "AMERICAN_INDIAN", "ASIAN", "HISPANIC_LATINO", "WHITE", "OTHER", "DECLINE", "HAWAIIAN_PACIFIC"]
        if candidate_ethnicity not in allowed_values:
            raise ValueError(
                "Invalid value for `candidate_ethnicity` ({0}), must be one of {1}"
                .format(candidate_ethnicity, allowed_values)
            )

        self._candidate_ethnicity = candidate_ethnicity

    @property
    def applied_via(self):
        """
        Gets the applied_via of this ApplicationsReportContent.

        :return: The applied_via of this ApplicationsReportContent.
        :rtype: str
        """
        return self._applied_via

    @applied_via.setter
    def applied_via(self, applied_via):
        """
        Sets the applied_via of this ApplicationsReportContent.

        :param applied_via: The applied_via of this ApplicationsReportContent.
        :type: str
        """
        allowed_values = ["APPLIED", "UPLOADED", "AGENCY_PORTAL", "OTHER"]
        if applied_via not in allowed_values:
            raise ValueError(
                "Invalid value for `applied_via` ({0}), must be one of {1}"
                .format(applied_via, allowed_values)
            )

        self._applied_via = applied_via

    @property
    def position_id(self):
        """
        Gets the position_id of this ApplicationsReportContent.

        :return: The position_id of this ApplicationsReportContent.
        :rtype: str
        """
        return self._position_id

    @position_id.setter
    def position_id(self, position_id):
        """
        Sets the position_id of this ApplicationsReportContent.

        :param position_id: The position_id of this ApplicationsReportContent.
        :type: str
        """

        self._position_id = position_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApplicationsReportContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
