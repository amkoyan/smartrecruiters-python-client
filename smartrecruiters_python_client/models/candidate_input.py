# coding: utf-8

"""
    Customer API - version 1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CandidateInput(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, first_name=None, last_name=None, email=None, phone_number=None, location=None, web=None, tags=None, education=None, experience=None, source_details=None, internal=None):
        """
        CandidateInput - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'first_name': 'str',
            'last_name': 'str',
            'email': 'str',
            'phone_number': 'str',
            'location': 'CandidateLocation',
            'web': 'WebProfile',
            'tags': 'list[str]',
            'education': 'list[Education]',
            'experience': 'list[Experience]',
            'source_details': 'CandidateSource',
            'internal': 'bool'
        }

        self.attribute_map = {
            'first_name': 'firstName',
            'last_name': 'lastName',
            'email': 'email',
            'phone_number': 'phoneNumber',
            'location': 'location',
            'web': 'web',
            'tags': 'tags',
            'education': 'education',
            'experience': 'experience',
            'source_details': 'sourceDetails',
            'internal': 'internal'
        }

        self._first_name = first_name
        self._last_name = last_name
        self._email = email
        self._phone_number = phone_number
        self._location = location
        self._web = web
        self._tags = tags
        self._education = education
        self._experience = experience
        self._source_details = source_details
        self._internal = internal

    @property
    def first_name(self):
        """
        Gets the first_name of this CandidateInput.

        :return: The first_name of this CandidateInput.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this CandidateInput.

        :param first_name: The first_name of this CandidateInput.
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")
        if first_name is not None and len(first_name) < 1:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this CandidateInput.

        :return: The last_name of this CandidateInput.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this CandidateInput.

        :param last_name: The last_name of this CandidateInput.
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")
        if last_name is not None and len(last_name) < 1:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")

        self._last_name = last_name

    @property
    def email(self):
        """
        Gets the email of this CandidateInput.

        :return: The email of this CandidateInput.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this CandidateInput.

        :param email: The email of this CandidateInput.
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def phone_number(self):
        """
        Gets the phone_number of this CandidateInput.

        :return: The phone_number of this CandidateInput.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """
        Sets the phone_number of this CandidateInput.

        :param phone_number: The phone_number of this CandidateInput.
        :type: str
        """

        self._phone_number = phone_number

    @property
    def location(self):
        """
        Gets the location of this CandidateInput.

        :return: The location of this CandidateInput.
        :rtype: CandidateLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this CandidateInput.

        :param location: The location of this CandidateInput.
        :type: CandidateLocation
        """

        self._location = location

    @property
    def web(self):
        """
        Gets the web of this CandidateInput.

        :return: The web of this CandidateInput.
        :rtype: WebProfile
        """
        return self._web

    @web.setter
    def web(self, web):
        """
        Sets the web of this CandidateInput.

        :param web: The web of this CandidateInput.
        :type: WebProfile
        """

        self._web = web

    @property
    def tags(self):
        """
        Gets the tags of this CandidateInput.

        :return: The tags of this CandidateInput.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this CandidateInput.

        :param tags: The tags of this CandidateInput.
        :type: list[str]
        """

        self._tags = tags

    @property
    def education(self):
        """
        Gets the education of this CandidateInput.

        :return: The education of this CandidateInput.
        :rtype: list[Education]
        """
        return self._education

    @education.setter
    def education(self, education):
        """
        Sets the education of this CandidateInput.

        :param education: The education of this CandidateInput.
        :type: list[Education]
        """

        self._education = education

    @property
    def experience(self):
        """
        Gets the experience of this CandidateInput.

        :return: The experience of this CandidateInput.
        :rtype: list[Experience]
        """
        return self._experience

    @experience.setter
    def experience(self, experience):
        """
        Sets the experience of this CandidateInput.

        :param experience: The experience of this CandidateInput.
        :type: list[Experience]
        """

        self._experience = experience

    @property
    def source_details(self):
        """
        Gets the source_details of this CandidateInput.

        :return: The source_details of this CandidateInput.
        :rtype: CandidateSource
        """
        return self._source_details

    @source_details.setter
    def source_details(self, source_details):
        """
        Sets the source_details of this CandidateInput.

        :param source_details: The source_details of this CandidateInput.
        :type: CandidateSource
        """

        self._source_details = source_details

    @property
    def internal(self):
        """
        Gets the internal of this CandidateInput.

        :return: The internal of this CandidateInput.
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """
        Sets the internal of this CandidateInput.

        :param internal: The internal of this CandidateInput.
        :type: bool
        """

        self._internal = internal

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CandidateInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
