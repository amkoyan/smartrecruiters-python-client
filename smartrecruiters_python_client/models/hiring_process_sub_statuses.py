# coding: utf-8

"""
    Customer API - version 1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class HiringProcessSubStatuses(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, in_review=None, interview=None, offered=None):
        """
        HiringProcessSubStatuses - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'in_review': 'list[str]',
            'interview': 'list[str]',
            'offered': 'list[str]'
        }

        self.attribute_map = {
            'in_review': 'IN_REVIEW',
            'interview': 'INTERVIEW',
            'offered': 'OFFERED'
        }

        self._in_review = in_review
        self._interview = interview
        self._offered = offered

    @property
    def in_review(self):
        """
        Gets the in_review of this HiringProcessSubStatuses.

        :return: The in_review of this HiringProcessSubStatuses.
        :rtype: list[str]
        """
        return self._in_review

    @in_review.setter
    def in_review(self, in_review):
        """
        Sets the in_review of this HiringProcessSubStatuses.

        :param in_review: The in_review of this HiringProcessSubStatuses.
        :type: list[str]
        """

        self._in_review = in_review

    @property
    def interview(self):
        """
        Gets the interview of this HiringProcessSubStatuses.

        :return: The interview of this HiringProcessSubStatuses.
        :rtype: list[str]
        """
        return self._interview

    @interview.setter
    def interview(self, interview):
        """
        Sets the interview of this HiringProcessSubStatuses.

        :param interview: The interview of this HiringProcessSubStatuses.
        :type: list[str]
        """

        self._interview = interview

    @property
    def offered(self):
        """
        Gets the offered of this HiringProcessSubStatuses.

        :return: The offered of this HiringProcessSubStatuses.
        :rtype: list[str]
        """
        return self._offered

    @offered.setter
    def offered(self, offered):
        """
        Sets the offered of this HiringProcessSubStatuses.

        :param offered: The offered of this HiringProcessSubStatuses.
        :type: list[str]
        """

        self._offered = offered

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HiringProcessSubStatuses):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
