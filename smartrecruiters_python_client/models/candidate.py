# coding: utf-8

"""
    Unofficial python library for the SmartRecruiters API

    The SmartRecruiters API provides a platform to integrate services or applications, build apps and create fully customizable career sites. It exposes SmartRecruiters functionality and allows to connect and build software enhancing it.

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Candidate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, internal=None, first_name=None, last_name=None, email=None, created_on=None, updated_on=None, location=None, average_rating=None, tags=None, primary_assignment=None, secondary_assignments=None, actions=None):
        """
        Candidate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'internal': 'bool',
            'first_name': 'str',
            'last_name': 'str',
            'email': 'str',
            'created_on': 'datetime',
            'updated_on': 'datetime',
            'location': 'CandidateLocation',
            'average_rating': 'float',
            'tags': 'list[str]',
            'primary_assignment': 'CandidatePrimaryAssignment',
            'secondary_assignments': 'list[CandidateSecondaryAssignments]',
            'actions': 'CandidateActions'
        }

        self.attribute_map = {
            'id': 'id',
            'internal': 'internal',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'email': 'email',
            'created_on': 'createdOn',
            'updated_on': 'updatedOn',
            'location': 'location',
            'average_rating': 'averageRating',
            'tags': 'tags',
            'primary_assignment': 'primaryAssignment',
            'secondary_assignments': 'secondaryAssignments',
            'actions': 'actions'
        }

        self._id = id
        self._internal = internal
        self._first_name = first_name
        self._last_name = last_name
        self._email = email
        self._created_on = created_on
        self._updated_on = updated_on
        self._location = location
        self._average_rating = average_rating
        self._tags = tags
        self._primary_assignment = primary_assignment
        self._secondary_assignments = secondary_assignments
        self._actions = actions

    @property
    def id(self):
        """
        Gets the id of this Candidate.

        :return: The id of this Candidate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Candidate.

        :param id: The id of this Candidate.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def internal(self):
        """
        Gets the internal of this Candidate.

        :return: The internal of this Candidate.
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """
        Sets the internal of this Candidate.

        :param internal: The internal of this Candidate.
        :type: bool
        """
        if internal is None:
            raise ValueError("Invalid value for `internal`, must not be `None`")

        self._internal = internal

    @property
    def first_name(self):
        """
        Gets the first_name of this Candidate.

        :return: The first_name of this Candidate.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this Candidate.

        :param first_name: The first_name of this Candidate.
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this Candidate.

        :return: The last_name of this Candidate.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this Candidate.

        :param last_name: The last_name of this Candidate.
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def email(self):
        """
        Gets the email of this Candidate.

        :return: The email of this Candidate.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Candidate.

        :param email: The email of this Candidate.
        :type: str
        """

        self._email = email

    @property
    def created_on(self):
        """
        Gets the created_on of this Candidate.

        :return: The created_on of this Candidate.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this Candidate.

        :param created_on: The created_on of this Candidate.
        :type: datetime
        """
        if created_on is None:
            raise ValueError("Invalid value for `created_on`, must not be `None`")

        self._created_on = created_on

    @property
    def updated_on(self):
        """
        Gets the updated_on of this Candidate.

        :return: The updated_on of this Candidate.
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """
        Sets the updated_on of this Candidate.

        :param updated_on: The updated_on of this Candidate.
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def location(self):
        """
        Gets the location of this Candidate.

        :return: The location of this Candidate.
        :rtype: CandidateLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this Candidate.

        :param location: The location of this Candidate.
        :type: CandidateLocation
        """

        self._location = location

    @property
    def average_rating(self):
        """
        Gets the average_rating of this Candidate.

        :return: The average_rating of this Candidate.
        :rtype: float
        """
        return self._average_rating

    @average_rating.setter
    def average_rating(self, average_rating):
        """
        Sets the average_rating of this Candidate.

        :param average_rating: The average_rating of this Candidate.
        :type: float
        """

        self._average_rating = average_rating

    @property
    def tags(self):
        """
        Gets the tags of this Candidate.

        :return: The tags of this Candidate.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Candidate.

        :param tags: The tags of this Candidate.
        :type: list[str]
        """

        self._tags = tags

    @property
    def primary_assignment(self):
        """
        Gets the primary_assignment of this Candidate.

        :return: The primary_assignment of this Candidate.
        :rtype: CandidatePrimaryAssignment
        """
        return self._primary_assignment

    @primary_assignment.setter
    def primary_assignment(self, primary_assignment):
        """
        Sets the primary_assignment of this Candidate.

        :param primary_assignment: The primary_assignment of this Candidate.
        :type: CandidatePrimaryAssignment
        """

        self._primary_assignment = primary_assignment

    @property
    def secondary_assignments(self):
        """
        Gets the secondary_assignments of this Candidate.

        :return: The secondary_assignments of this Candidate.
        :rtype: list[CandidateSecondaryAssignments]
        """
        return self._secondary_assignments

    @secondary_assignments.setter
    def secondary_assignments(self, secondary_assignments):
        """
        Sets the secondary_assignments of this Candidate.

        :param secondary_assignments: The secondary_assignments of this Candidate.
        :type: list[CandidateSecondaryAssignments]
        """

        self._secondary_assignments = secondary_assignments

    @property
    def actions(self):
        """
        Gets the actions of this Candidate.

        :return: The actions of this Candidate.
        :rtype: CandidateActions
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """
        Sets the actions of this Candidate.

        :param actions: The actions of this Candidate.
        :type: CandidateActions
        """

        self._actions = actions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Candidate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
